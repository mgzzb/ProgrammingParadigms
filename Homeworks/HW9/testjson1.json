[
  {
    "model": "bug_api.bug",
    "pk": 43814,
    "fields": {
      "package": "Website problem",
      "status": "Open",
      "version": "Irrelevant",
      "summary": "[GCOV] Compile result links for PECL exts"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 44278,
    "fields": {
      "package": "ODBC related",
      "status": "Re-Opened",
      "version": "7",
      "summary": "ODBC: nvarchar(max) mangled"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 47624,
    "fields": {
      "package": "SOAP related",
      "status": "Verified",
      "version": "5.6.11",
      "summary": "SOAP response has int type for a key value that is out of range"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 47982,
    "fields": {
      "package": "PDO MySQL",
      "status": "Verified",
      "version": "5.2CVS-2009-04-16 (snap)",
      "summary": "PDO_mysql: Storing image binary data"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 49106,
    "fields": {
      "package": "Apache2 related",
      "status": "Analyzed",
      "version": "5.*, 6",
      "summary": "PHP incorrectly sets no_local_copy=1 on response as Apache 2 module"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 49169,
    "fields": {
      "package": "SOAP related",
      "status": "Verified",
      "version": "7.2.11",
      "summary": "SoapServer calls wrong function, although \"SOAP action\" header is correct"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 49270,
    "fields": {
      "package": "Compile Failure",
      "status": "Assigned",
      "version": "Irrelevant",
      "summary": "configure fails if PHP source folder path contains spaces"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 49874,
    "fields": {
      "package": "Filesystem function related",
      "status": "Open",
      "version": "5.5.4",
      "summary": "ftell() and fseek() inconsistency when using stream filters"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 50293,
    "fields": {
      "package": "OpenSSL related",
      "status": "Verified",
      "version": "7.4",
      "summary": "Several openssl functions ignore the VCWD"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 50892,
    "fields": {
      "package": "Class/Object related",
      "status": "Open",
      "version": "5.3.1",
      "summary": "Protected members of non-congruent children classes are visible"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 51056,
    "fields": {
      "package": "Streams related",
      "status": "Assigned",
      "version": "5.5.0 alpha",
      "summary": "fread() on blocking stream will block even if data is available"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 51983,
    "fields": {
      "package": "FPM related",
      "status": "Open",
      "version": "5.3SVN-2010-06-03 (snap)",
      "summary": "[fpm sapi] pm.status_path not working when cgi.fix_pathinfo=1"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 52065,
    "fields": {
      "package": "Safe Mode/open_basedir",
      "status": "Verified",
      "version": "5.6.8",
      "summary": "Warning about open_basedir restriction while accessing a file as directory"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 52376,
    "fields": {
      "package": "*Directory/Filesystem functions",
      "status": "Open",
      "version": "5.3.2",
      "summary": "opendir() cannot open UNC paths in IIS7 using passthrough auth."
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 53518,
    "fields": {
      "package": "Program Execution",
      "status": "Open",
      "version": "5.3SVN-2010-12-10 (SVN)",
      "summary": "pclose and proc_close do not return values for use with pcntl_wifexited"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 53776,
    "fields": {
      "package": "SOAP related",
      "status": "Open",
      "version": "5.3.5",
      "summary": "soap module does not allow to use underlying persistent connections"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 55138,
    "fields": {
      "package": "PDO OCI",
      "status": "Open",
      "version": "5.3.6",
      "summary": "PDO_OCI cannot insert more than 1332 one byte chars in al32utf8 varchar2 field"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 55639,
    "fields": {
      "package": "SOAP related",
      "status": "Open",
      "version": "Irrelevant",
      "summary": "Digest autentication dont work"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 55677,
    "fields": {
      "package": "SOAP related",
      "status": "Open",
      "version": "5.3.8",
      "summary": "Digest autentication dont work"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 55831,
    "fields": {
      "package": "*General Issues",
      "status": "Open",
      "version": "Irrelevant",
      "summary": "double check for host_alias in acinclude.m4"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 60707,
    "fields": {
      "package": "Variables related",
      "status": "Open",
      "version": "5.3.9",
      "summary": "max_input_vars allows one extra var"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 60961,
    "fields": {
      "package": "FPM related",
      "status": "Open",
      "version": "7",
      "summary": "Graceful Restart (USR2) isn't very graceful"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 60981,
    "fields": {
      "package": "Testing related",
      "status": "Open",
      "version": "5.3.10",
      "summary": "Shell environment inaccessible in tests"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 60994,
    "fields": {
      "package": "PDO OCI",
      "status": "Open",
      "version": "Irrelevant",
      "summary": "PDO_OCI: Reading a multibyte CLOB caps at 8192 characters"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 61525,
    "fields": {
      "package": "SOAP related",
      "status": "Open",
      "version": "5.4.0",
      "summary": "SOAP functions require at least one space after HTTP header colon"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 61584,
    "fields": {
      "package": "Readline related",
      "status": "Open",
      "version": "5.4.0",
      "summary": "when using readline_info to set line_buffer, it causes memory corruption"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 61597,
    "fields": {
      "package": "SimpleXML related",
      "status": "Re-Opened",
      "version": "8.0.3",
      "summary": "SimpleXMLElement doesn't include both @attributes and textContent in properties"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 62032,
    "fields": {
      "package": "Filter related",
      "status": "Verified",
      "version": "5.4.3",
      "summary": "filter_var incorrectly strips characters from strings after \"<\""
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 62106,
    "fields": {
      "package": "Zip Related",
      "status": "Assigned",
      "version": "master-Git-2012-05-22 (Git)",
      "summary": "zip can (and will, in real-life cases) leak huge tempfiles"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 63343,
    "fields": {
      "package": "PDO related",
      "status": "Analyzed",
      "version": "Irrelevant",
      "summary": "Commit failure for repeated persistent connection"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 63380,
    "fields": {
      "package": "*XML functions",
      "status": "Open",
      "version": "master-Git-2012-10-29 (Git)",
      "summary": "Allocation via libxml does not use PHP's per-request allocator"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 63767,
    "fields": {
      "package": "FTP related",
      "status": "Assigned",
      "version": "5.4.9",
      "summary": "Follow up for Bug #36103"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 63941,
    "fields": {
      "package": "Performance problem",
      "status": "Open",
      "version": "5.4Git-2013-01-08 (snap)",
      "summary": "Date timezone code-cleanup"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 64173,
    "fields": {
      "package": "Filter related",
      "status": "Verified",
      "version": "Irrelevant",
      "summary": "filter_var filter_validate_url incorrect"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 64196,
    "fields": {
      "package": "Reproducible crash",
      "status": "Open",
      "version": "Irrelevant",
      "summary": "Indirect/magic call recursion stack overflow"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 64280,
    "fields": {
      "package": "Reproducible crash",
      "status": "Open",
      "version": "master-Git-2013-02-22 (Git)",
      "summary": "__destruct loop segfaults"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 64291,
    "fields": {
      "package": "Scripting Engine problem",
      "status": "Open",
      "version": "5.4.12",
      "summary": "Indeterminate GC of evaled lambda function resources"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 64346,
    "fields": {
      "package": "*General Issues",
      "status": "Open",
      "version": "5.4.12",
      "summary": "Function name resolution and eval"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 64531,
    "fields": {
      "package": "SQLite related",
      "status": "Verified",
      "version": "5.4.13",
      "summary": "SQLite3Result::fetchArray runs the query again."
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 65069,
    "fields": {
      "package": "SPL related",
      "status": "Analyzed",
      "version": "5.5.0RC3",
      "summary": "GlobIterator fails to access files inside an open_basedir restricted dir"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 65154,
    "fields": {
      "package": "OpenSSL related",
      "status": "Open",
      "version": "5.5.0",
      "summary": "setup_verify implicitly adds default CA paths"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 65398,
    "fields": {
      "package": "FPM related",
      "status": "Open",
      "version": "5.5.1",
      "summary": "Race condition between SIGCHLD and child stdout/stderr event leads to segfault"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 65600,
    "fields": {
      "package": "SPL related",
      "status": "Verified",
      "version": "5.5.3",
      "summary": "SplFileObject->next() not move next without current()"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 66013,
    "fields": {
      "package": "Compile Failure",
      "status": "Open",
      "version": "7",
      "summary": "Solaris build failure"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 66019,
    "fields": {
      "package": "Date/time related",
      "status": "Assigned",
      "version": "5.5.5",
      "summary": "DateTime object does not support short ISO 8601 time format - YYYY-MM-DDTHH"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 66095,
    "fields": {
      "package": "Unknown/Other Function",
      "status": "Open",
      "version": "5.5.6",
      "summary": "Bundled libmagic has public symbols and conflicts with system libmagic"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 66227,
    "fields": {
      "package": "Scripting Engine problem",
      "status": "Open",
      "version": "5.5Git-2013-12-03 (Git)",
      "summary": "exec() returns early upon multiple signals"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 66389,
    "fields": {
      "package": "XMLRPC-EPI related",
      "status": "Open",
      "version": "5.5.8RC1",
      "summary": "XMLRPC decoding 64bit integers"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 66486,
    "fields": {
      "package": "Date/time related",
      "status": "Re-Opened",
      "version": "5.5.8",
      "summary": "strtotime on string with whitespace gives current timestamp not false"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 66694,
    "fields": {
      "package": "FPM related",
      "status": "Open",
      "version": "5.4.25",
      "summary": "php-fpm is crashing when using eventport"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 66710,
    "fields": {
      "package": "Doc Build problem",
      "status": "Assigned",
      "version": "5.5.9",
      "summary": "using phd.config.php but not set all config will error"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 67292,
    "fields": {
      "package": "SOAP related",
      "status": "Open",
      "version": "5.4Git-2014-05-16 (snap)",
      "summary": "SoapClient posts on connection closed by server"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 67351,
    "fields": {
      "package": "Streams related",
      "status": "Verified",
      "version": "5.4.28",
      "summary": "copy() should handle HTTP 304 response"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 67383,
    "fields": {
      "package": "*General Issues",
      "status": "Open",
      "version": "Irrelevant",
      "summary": "exec() leaks file and socket descriptors to called program"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 67414,
    "fields": {
      "package": "Scripting Engine problem",
      "status": "Open",
      "version": "5.6.0beta4",
      "summary": "PhD build fails with exit code 255"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 67736,
    "fields": {
      "package": "*General Issues",
      "status": "Verified",
      "version": "5.6.0",
      "summary": "setcookie() not updating existing cookies"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 68018,
    "fields": {
      "package": "FPM related",
      "status": "Open",
      "version": "master-Git-2014-09-13 (Git)",
      "summary": "php_value directive modifies \"Changeable\" context"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 68230,
    "fields": {
      "package": "Testing related",
      "status": "Open",
      "version": "5.6.1",
      "summary": "OpenSSL tests spawn PHP processes without preserving the test environment"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 68466,
    "fields": {
      "package": "SPL related",
      "status": "Open",
      "version": "5.6.3",
      "summary": "Iterating SplFileObject shows empty line at end of file"
    }
  },
  {
    "model": "bug_api.bug",
    "pk": 68606,
    "fields": {
      "package": "Reproducible crash",
      "status": "Assigned",
      "version": "5.6.3",
      "summary": "stack overflow/segfault in zend_objects_free_object_storage"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 1,
    "fields": {
      "bug": 43814,
      "user": "bjori@php.net",
      "content": "Errr. I mean on the gcov.php.net site :)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 2,
    "fields": {
      "bug": 43814,
      "user": "philip@php.net",
      "content": "I'm unsure if this problem still exists because PECL extensions moved to core are \r\n[usually] no longer maintained in PECL, and GCOV only tests core. What do you \r\nthink?\r\n\r\nIn related news, the links are changed from lxr/cvs to og/svn in SVN."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 3,
    "fields": {
      "bug": 43814,
      "user": "hannes dot magnusson at gmail dot com",
      "content": "Currently it seems to only do core stuff, but at the time of that writing phar \r\nwas in pecl.\r\nI don't see any pecl extensions there now, but the word is pecl/http will be \r\nenabled soonish - and it will then have the same problem :)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 4,
    "fields": {
      "bug": 43814,
      "user": "philip@php.net",
      "content": "So extensions that will/may move to core into the future are added? Okay, that \r\nmakes sense, this shouldn't be too difficult. A fix will likely take place once we \r\nget the official OpenGrok box up and running."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 5,
    "fields": {
      "bug": 43814,
      "user": "nlopess@php.net",
      "content": "I add new extensions on a per-request basis. This problem only shows up if the extension only lives in PECL.\r\npecl/http was disabled since it was breaking the build too often, and the authors didn't fix the problem quickly enough. Of course it can be reenabled again if the authors promise they will only commit stuff after (at least) successful compilation."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 6,
    "fields": {
      "bug": 43814,
      "user": "philip@php.net",
      "content": "Nuno, any suggestions for how to fix this bug? In other words, is the information \r\n(which PECL extensions are enabled) available to site.api.php? Can it be?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 7,
    "fields": {
      "bug": 43814,
      "user": "nlopess@php.net",
      "content": "The information is not available to the frontend right now.\r\nA \"simple\" fix is to do a \"svn info\" on each extensions' dir and check if the url matches pecl or not. Or even have a generic scheme that builds the URL from a generic PHP svn path."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 8,
    "fields": {
      "bug": 43814,
      "user": "cmb@php.net",
      "content": "I think we should decomission gcov.php.net, unless somebody is\r\nwilling to spend time on making it work with recent PHP version.\r\nThe last successful coverage report of PHP 7.4 is from\r\n2019-05-08[1].\r\n\r\n[1] <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 9,
    "fields": {
      "bug": 44278,
      "user": "ethan dot nelson at ltd dot org",
      "content": "<?php\r\n\r\nini_set(\"display_errors\",\"yes\");\r\n\r\n$poo = new PDO(\"odbc:DEVELOPMENT\");\r\n\r\n$query = \"SELECT CAST('asdfasdfasdf' AS nvarchar) AS good, \r\nCAST('asdfasdfasdf' AS nvarchar(max)) AS garbled\";\r\n$stm = $poo->prepare($query);\r\necho $query.\"<br>\\n\";\r\n\r\n$id = 1;\r\n$stm->bindParam(':id',$id,PDO::PARAM_INT);\r\n$id2 = 1;\r\n$stm->bindParam(':id2',$id2,PDO::PARAM_INT);\r\n\r\necho \"<pre>\\n\";\r\nif ($stm->execute()) print_r($stm->fetchAll(PDO::FETCH_ASSOC));\r\nelse print_r( $stm->errorInfo());\r\necho \"</pre>\\n\";\r\n\r\nphpinfo();\r\n\r\n?>\r\n\r\n-----------Results in:\r\n\r\nSELECT CAST('asdfasdfasdf' AS nvarchar) AS good, CAST('asdfasdfasdf' \r\nAS nvarchar(max)) AS garbled\r\nArray\r\n(\r\n    [0] => Array\r\n        (\r\n            [good] => asdfasdfasdf\r\n            [garbled] => ? ?\r\n        )\r\n\r\n)\r\n\r\nPHP Version 5.2.7RC2-dev"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 10,
    "fields": {
      "bug": 44278,
      "user": "jani@php.net",
      "content": "Please try using this CVS snapshot:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 11,
    "fields": {
      "bug": 44278,
      "user": "php-bugs at lists dot php dot net",
      "content": "No feedback was provided for this bug for over a week, so it is\nbeing suspended automatically. If you are able to provide the\ninformation that was originally requested, please do so and change\nthe status of the bug back to \"Open\"."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 12,
    "fields": {
      "bug": 44278,
      "user": "ethan dot nelson at ltd dot org",
      "content": "No difference in behavior from what I can see.  Can you reproduce the bug on your end?  My screen reports the following using my reproduce code (with a few lines from the phpinfo command()):\r\n\r\nSELECT CAST('asdfasdfasdf' AS nvarchar) AS good, CAST('asdfasdfasdf' AS nvarchar(max)) AS garbled\r\n\r\nArray\r\n(\r\n    [0] => Array\r\n        (\r\n            [good] => asdfasdfasdf\r\n            [garbled] => &#65533;?[(?[&#65533;&#65533;&#65533;\r\n        )\r\n\r\n)\r\n\r\nPHP Logo\r\nPHP Version 5.2.10-dev\r\n\r\nSystem \tWindows NT LTD-PWWW2 5.2 build 3790\r\nBuild Date \tMay 19 2009 11:39:28\r\nConfigure Command \tcscript /nologo configure.js \"--enable-snapshot-build\" \"--enable-debug-pack\" \"--with-snapshot-template=d:\\php-sdk\\bin\\\\..\\snap_5_2\\vc6\\x86\\template\" \"--with-php-build=d:\\php-sdk\\bin\\\\..\\snap_5_2\\vc6\\x86\\php_build\" \"--with-pdo-oci=D:\\php-sdk\\oracle\\instantclient10\\sdk,shared\" \"--with-oci8=D:\\php-sdk\\oracle\\instantclient10\\sdk,shared\"\r\nServer API \tISAPI"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 13,
    "fields": {
      "bug": 44278,
      "user": "ian at mutexlabs dot com",
      "content": "I can confirm this bug on Windows 2003, PHP 5.2.7, 5.2.9 and the 5.2.10-dev release linked in this bug.\r\n\r\nI'm actually using the odbc_* functions, not PDO, but the behaviour is the same.\r\n\r\nI worked around the problem by rebuilding the database using nvarchar(255) instead of nvarchar(max) types - it was safer than modifying the PHP app.\r\n\r\nI saw similar (corruption) behaviour on varchar and char types, though I didn't investigate closely.\r\n\r\ntext columns are OK, but unsuitable for my application."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 14,
    "fields": {
      "bug": 44278,
      "user": "ethan dot nelson at ltd dot org",
      "content": "The following article is important even though it has to do with \r\nencryption.  The bug report exposes what PDO is using to execute \r\nqueries, sp_prepexec.  The comment from an MS moderator is that it is \r\nan unsupported feature.  There may be another choice for use by PDO \r\nthan prepexec."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 15,
    "fields": {
      "bug": 44278,
      "user": "tidelipop at gmail dot com",
      "content": "Well, when will this bug be fixed!? I need to use this now!\r\n/Andreas"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 16,
    "fields": {
      "bug": 44278,
      "user": "tawnos at darkhosts dot org",
      "content": "Same issue\r\nPHP: 5.6.1\r\nOS: Debian/Linux 7.6\r\nDB: AzureSQL (MSSQL2012)\r\nDriver: PDO_ODBC / MS ODBC Driver for Linux 11.0\r\n\r\nWhat's more, we have detected that if you have TEXT column anywhere before nvarchar(max) in table, all castings from NVARCHAR(MAX) works as a charm, hovewer TEXT/NTEXT/IMAGE fields are deprecated and are already removed in MSSQL2014, so that's only a hack people with 2k8 and 2k12 databases can use."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 17,
    "fields": {
      "bug": 44278,
      "user": "cmb@php.net",
      "content": "This is a duplicate of"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 18,
    "fields": {
      "bug": 44278,
      "user": "chris at ocproducts dot com",
      "content": "That other bug ticket is closed (I think I know why), and the issue still happens in PHP7.\r\n\r\nThe issue is caused because of a bad assumption in the code - that only binary or long results require a full SQLGetData call (as opposed to SQLBindCol). In fact, if a vallen of <=0 is returned by reference from SQLBindCol, a SQLGetData will be required because this may mean SQL_NO_TOTAL (-4 value for vallen). This is actually a basic memory safety issue (vallen is used for malloc), so this is worse than just data mangling.\r\n\r\nCertainly FreeTDS is for me using a normal VARCHAR result (not LONGVARCHAR) for VARCHAR(MAX). Hence breaking the aforementioned assumption.\r\n\r\nI also got a zero value for vallen when running as an Apache module, which I had to treat with SQLGetData too. This is confusing to me, I think it may have something to do with asynchronous execution (this is how ODBC seems to be specified) but I can't find the PHP lib even touching that, so I'm unsure.\r\n\r\nI have been able to fix the issue on my machine and am about to attach a patch.\r\n\r\nTruth is this code could do with a major refactoring. There is a lot of copy and pasting, and my patch doesn't try and solve that."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 19,
    "fields": {
      "bug": 44278,
      "user": "chris at ocproducts dot com",
      "content": "On further testing, I found my patch was mostly correct, but insufficient. There is also another manifestation of the bug fixed in #69975, but for varchar(max) rather than nvarchar(max).\r\n\r\nI am uploading a new patch that covers this, improves code commenting a bit, fixes a couple of mistakes in my prior patch, and is more defensive in case SQLBindCol never runs.\r\n\r\nThis resolves my confusion re \"I also got a zero value\", and I now understand the asynchronous execution relates specifically to the behaviour of SQLBindCol binding rows as the cursor advances (previously I thought it was something to do with app responsiveness in the face of DB latency).\r\n\r\nThis is stable for me now. I got the full Composr CMS test set passing on ODBC using SQL Server Express 2017, with webserver on a Mac using freeTDS. This was a long journey, quite a few issues, notably also my bug filed as #75534."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 20,
    "fields": {
      "bug": 44278,
      "user": "cmb@php.net",
      "content": "> That other bug ticket is closed\r\n\r\nTo clarify: the ticket is private."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 21,
    "fields": {
      "bug": 44278,
      "user": "ab@php.net",
      "content": "@chris at ocproducts dot com, thanks for the patch. Could you also add some tests, please? It concerns both nvarchar and varchar now.\r\n\r\nThanks."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 22,
    "fields": {
      "bug": 44278,
      "user": "chris at ocproducts dot com",
      "content": "It'd take me a few days to get back into this and to the point of writing working PDO tests, I just don't have that kind of time I'm afraid."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 23,
    "fields": {
      "bug": 44278,
      "user": "ab@php.net",
      "content": "I see. Naturally bugfixes are checked by the tests, which is also helpful for a review and to ensure future bugfixes don't breach existing behaviors. I was just going through some ODBC related tickets today, so stumbled upon this one. From what is done in the second patch - it is similar to what is going in ext/odbc. The place with the vallen < 0 is however something interesting, namely to know, how the negative length is produced. Perhaps it needs to be done in ext/odbc, too. Anyway, i might check your patch later then and see for tests, as we shouldn't loose the good work. Or perhaps you'll find some time for it.\r\n\r\nThanks."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 24,
    "fields": {
      "bug": 44278,
      "user": "cmb@php.net",
      "content": "Both attached patches are for ext/odbc, and it seems to me this\r\nissue has been resolved for ext/pdo_odbc, so I'm changing the\r\naffected package."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 25,
    "fields": {
      "bug": 47624,
      "user": "akshah123 at hotmail dot com",
      "content": "Is there any additional information that I can provide to perhaps \r\nspeed up the process to resolve this ticket?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 26,
    "fields": {
      "bug": 47624,
      "user": "akshah123 at hotmail dot com",
      "content": "Hello, \r\n\r\nI have confirmed that this issue is in 5.3.0 and 5.2.10."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 27,
    "fields": {
      "bug": 47624,
      "user": "sjoerd@php.net",
      "content": "Thank you for your bug report.\r\n\r\nCould you please supply us with a piece of WSDL describing the array? Also, which client are you using which gives this error?\r\n\r\nIf I understand correctly, the problem occurs with the soapenc:array type and the Axis 1 SOAP library."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 28,
    "fields": {
      "bug": 47624,
      "user": "akshah123 at hotmail dot com",
      "content": "The sample WSDL:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 29,
    "fields": {
      "bug": 47624,
      "user": "akshah123 at hotmail dot com",
      "content": "The script on server side (temp.php):"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 30,
    "fields": {
      "bug": 47624,
      "user": "akshah123 at hotmail dot com",
      "content": "I have tested this with 5.2.11 and the issue is there as well.  Please \r\nlet me know if I can provide any additional information that would help \r\nresolve this issue.\r\n\r\nI cannot upgrade my system and use cool new features in PHP 5.3 as this \r\nis blocking a major functionality in the application.\r\n\r\nThanks."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 31,
    "fields": {
      "bug": 47624,
      "user": "akshah123 at hotmail dot com",
      "content": "The problem persists with php 5.3.1 as well."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 32,
    "fields": {
      "bug": 47624,
      "user": "dmitry dot revenko at gmail dot com",
      "content": "Just encountered the same problem. It's a shame this not fixed till now. Don't even know - what should I do with it now."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 33,
    "fields": {
      "bug": 47624,
      "user": "exander77 at gmail dot com",
      "content": "What the hell is wrong with this project, four years and it is not fixed?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 34,
    "fields": {
      "bug": 47624,
      "user": "cmb@php.net",
      "content": "I've made some tests with recent PHP versions (5.6.11 and\r\n7.0.0beta1). On architectures where a PHP integer is 64bit, the\r\nargument has type xsd:int in the request envelope. This is clearly\r\nwrong, as xsd:int is a 32bit integer; it should be xsd:long. Where\r\na PHP integer is 32bit, the argument has type xsd:float, what is\r\nnot necessarly wrong per se. So much about the client.\r\n\r\nThe server obviously can't deal with xsd:float here. On 5.6.11 Win\r\nx86, the error that has been reported is thrown; on 7.0.0beta1 Win\r\nx86 PHP crashes.\r\n\r\nWhen the argument is encoded as xsd:int, we see an overflow\r\n(3916774700) (PHP 7.0.0beta1 on Win x64 and PHP 5.6.11 on Linux\r\nx64), whereby PHP 5.6.11 additionally raises \"Function\r\n(\"getAssetPathInfo\") is not a valid method for this service)\".\r\nOnly PHP 7 on Linux x64 yields the \"expected\" result.\r\n\r\nRelated to"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 35,
    "fields": {
      "bug": 47982,
      "user": "markac at home dot pl",
      "content": "Sorry, replace $avatar to $user->avatar from all. Function argument is an object $user, 'avatar' and 'id' is properties."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 36,
    "fields": {
      "bug": 47982,
      "user": "pajoye@php.net",
      "content": "Thank you for this bug report. To properly diagnose the problem, we\nneed a short but complete example script to be able to reproduce\nthis bug ourselves. \n\nA proper reproducing script starts with <?php and ends with ?>,\nis max. 10-20 lines long and does not require any external \nresources such as databases, etc. If the script requires a \ndatabase to demonstrate the issue, please make sure it creates \nall necessary tables, stored procedures etc.\n\nPlease avoid embedding huge scripts into the report.\n\nand mysql != PDO"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 37,
    "fields": {
      "bug": 47982,
      "user": "markac at home dot pl",
      "content": "$image = fopen('image.jpg','rb'); \r\n$sth->bindValue(':avatar', $image, PDO::PARAM_LOB);\r\n\r\nAlso not working, but when I remove this code:\r\n$pdo->exec('SET CHARACTER SET utf8');\r\n\r\nthen is working in this example.\r\nAny suggestion?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 38,
    "fields": {
      "bug": 47982,
      "user": "markac at home dot pl",
      "content": "OK. previous example also working witchout this code:\r\n$pdo->exec('SET CHARACTER SET utf8');\r\n\r\nHow use UTF-8 and blob columns?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 39,
    "fields": {
      "bug": 47982,
      "user": "johannes@php.net",
      "content": "I wasn't able to reproduce the issue. Could you please give me the mysql version (the server version as well as the version of the mysql client library used (see phpinfo() output) and the table defintion of your table. Thanks."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 40,
    "fields": {
      "bug": 47982,
      "user": "markac at home dot pl",
      "content": "Apache 2.2.11\r\nPHP 5.2.9-1\r\nMySQL 5.1.31-ommunity\r\n\r\nMySQL Client API version 5.0.51a\r\nPDO Driver for MySQL, client library version 5.0.51a\r\n\r\nTable structure:\r\n\r\nCREATE TABLE `users` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(45) CHARACTER SET latin2 NOT NULL,\r\n  `password` varchar(45) CHARACTER SET latin2 COLLATE latin2_bin NOT NULL,\r\n  `email` varchar(45) DEFAULT '',\r\n  `memo` text,\r\n  `first_name` varchar(45) NOT NULL,\r\n  `last_name` varchar(45) NOT NULL,\r\n  `removed` tinyint(1) unsigned NOT NULL DEFAULT '0',\r\n  `locked` tinyint(1) unsigned NOT NULL DEFAULT '1',\r\n  `avatar` blob,\r\n  PRIMARY KEY (`id`) USING BTREE,\r\n  UNIQUE KEY `Index_2` (`username`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=112 DEFAULT CHARSET=utf8;"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 41,
    "fields": {
      "bug": 47982,
      "user": "markac at home dot pl",
      "content": "Strange, but when I using another remote database server 5.0.66a everything is good. I thing problem is on my site (bad MySQL or PHP configuration? ;/)."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 42,
    "fields": {
      "bug": 47982,
      "user": "markac at home dot pl",
      "content": "Sorry once again. Works when\r\n$pdo->exec('SET CHARACTER SET utf8');\r\nis commented."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 43,
    "fields": {
      "bug": 47982,
      "user": "johannes@php.net",
      "content": "I'm not sure I correctly understand your both last messages. Is the problem only dependant on the SET NAMES call or also on the server version?\r\n\r\nThanks for clarification."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 44,
    "fields": {
      "bug": 47982,
      "user": "markac at home dot pl",
      "content": "Only dependant on the SET NAMES."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 45,
    "fields": {
      "bug": 47982,
      "user": "johannes@php.net",
      "content": "Thanks. Got it now reproduced using 5.2 as well as 5.3 (with both libmysql and mysqlnd)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 46,
    "fields": {
      "bug": 47982,
      "user": "uw@php.net",
      "content": "I don't call this a bug.\r\n\r\nPDO::PARAM_LOB \"can be either textual or binary in nature\":\r\n\r\n\"At some point in your application, you might find that you need to store \"large\" data in your database. Large typically means \"around 4kb or more\", although some databases can happily handle up to 32kb before data becomes \"large\". Large objects can be either textual or binary in nature. PDO allows you to work with this large data type by using the PDO::PARAM_LOB  type code in your PDOStatement::bindParam() or PDOStatement::bindColumn() calls. PDO::PARAM_LOB tells PDO to map the data as a stream, so that you can manipulate it using the PHP Streams API.\","
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 47,
    "fields": {
      "bug": 47982,
      "user": "uw@php.net",
      "content": "Not a MySQL specific issue. PDO general/PDO specification issue."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 48,
    "fields": {
      "bug": 47982,
      "user": "cmb@php.net",
      "content": "> A proper fix would be to introduce PDO::PARAM_BLOB for use with\r\n> binary data. PDO::PARAM_BLOB should go into the PDO core.\r\n\r\nSo this is apparently a PDO Core issue."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 49,
    "fields": {
      "bug": 49106,
      "user": "minfrin at sharp dot fm",
      "content": "The httpd mod_cache is designed to work as a self contained cache that bolts onto the front of the server (or with httpd v2.3+, can be inserted anywhere in the httpd filter stack for more targeted caching).\r\n\r\nIn theory, php shouldn't be touching any of the cache fields in request_rec at all, nor should php be trying to obscure any HTTP headers if it detects caching has been enabled.\r\n\r\nIt should be possible for a php script to support conditional requests, in other words php should be able to detect the If-None-Match header and respond with 200 OK or 304 Not Modified as appropriate.\r\n\r\nDoes anyone know what problem was being solved that made php want to care as to whether mod_cache was present?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 50,
    "fields": {
      "bug": 49106,
      "user": "rasmus@php.net",
      "content": "I have been looking at this code a bit this morning.  It does indeed \r\nlook like the no_local_copy is not needed here since both Last-Modified \r\nand ETag that may be present prior to PHP being executed are removed.\r\n\r\nAnd to minfrin, I think PHP does need to remove any ETag or Last-\r\nModified headers that are generated prior to PHP execution.  It simply \r\nmakes no sense for Apache to generate an ETag for a request prior to \r\nPHP executing on that request.  How could that possibly be valid?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 51,
    "fields": {
      "bug": 49106,
      "user": "n dot sherlock at gmail dot com",
      "content": "minfrin, the caching headers ETag and Last-Modified are added by Apache before PHP gets to run, and whether mod_cache is turned on or not. They aren't mod_cache specific."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 52,
    "fields": {
      "bug": 49169,
      "user": "jeroen at asystance dot nl",
      "content": "The correct link to the test case is"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 53,
    "fields": {
      "bug": 49169,
      "user": "robin dot harvey at chaptereight dot com",
      "content": "Hi,\r\n\r\nThis bug is affecting me too, and I've noticed that it's only the input parameters which trigger the bug - 2 functions can have the same output and they are treated individually.\r\n\r\nAlso, it seems that it's the order of the wsdl:binding/wsdl:operation declarations which makes a difference, swapping the wsdl:portType/wsdl:operation or wsdl:message ordering does not trigger the bug.\r\n\r\nHTH\r\n--Robin"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 54,
    "fields": {
      "bug": 49169,
      "user": "sjoerd@php.net",
      "content": "Could reproduce. Even though the soap action looked as follows:\r\nSOAPAction: \"operation2\"\r\nOperation 1 was called."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 55,
    "fields": {
      "bug": 49169,
      "user": "bigdan at gmail dot com?",
      "content": "Is anyone aware of a workaround? I am having this issue on Ubuntu Hardy.\r\n\r\nThanks"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 56,
    "fields": {
      "bug": 49169,
      "user": "bigdan at gmail dot com",
      "content": "Nevermind on the workaround - either this is not a bug, this issue was noticed well before this bug, or the comments here are entirely unrelated though they correct the issue for me:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 57,
    "fields": {
      "bug": 49169,
      "user": "jeroen at asystance dot nl",
      "content": "bigdan, I think you left out one option: this _is_ a bug.\r\n\r\nUsing RPC style _is_ a workaround, but one that doesn't always work.\r\n\r\nThe real problem is that SOAP should use the SOAPAction header to determine which operation to call, not guess based on parameters (which is what it looks to be doing now).\r\n\r\nWhile the comment you refer to does point out this very issue and predates this bug, that doesn't mean it's not a bug. Rather the commenter could (and should?) have filed this as a bug more than a year ago."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 58,
    "fields": {
      "bug": 49169,
      "user": "robin dot harvey at chaptereight dot com",
      "content": "@bigdan at gmail dot com\r\n\r\nThe workaround I'm using is to set up my WSDL so that all methods have a unique input type signature.  Of course this leads to an ugly and unnecessarily bloated WSDL, but there's not much other choice (other than WS02 PHP, that is....)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 59,
    "fields": {
      "bug": 49169,
      "user": "wee at xbe dot ch",
      "content": "this bug is really annoying.. the forced use of rpc (the \"workaround\") is not a serious fix.\r\n\r\nwe also evaluated wso2 (wsf_php) as the php soapserver simply isn't that business ready, but that too has it's issues (has problems when it comes to generate complex wsdl and with complex type handling on the php side). and it segfaults with an activated zend optimizer+ ;-)\r\n\r\nanyway, i just comment to give more importance to this bug."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 60,
    "fields": {
      "bug": 49169,
      "user": "spyowl at gmail dot com",
      "content": "Confirmed on 5.3.1RC3 using WSDL.\r\n\r\nThe problem seems to be the matching first argument name between methods (not the whole signature) - as long as 2 or more methods have the same name for the first argument the SoapServer will always execute the first method listed, regardless of soapAction, and even if there are additional arguments for those methods that are different from each other.\r\n\r\nThis is a pretty serious bug."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 61,
    "fields": {
      "bug": 49169,
      "user": "rkm at nykredit dot dk",
      "content": "It's not even enough to change the message name (I didn't get that from the initial comments) - One needs to change the element of the part.\r\n\r\nThus\r\n<wsdl:message name=\"getByIdRequest\">\r\n  <wsdl:part name=\"parameters\" element=\"tmp:ClientId\"/>\r\n</wsdl:message>\r\n\r\nWill not work with (reusing tmp:ClientId):\r\n<wsdl:message name=\"getByIdRequest2\">\r\n  <wsdl:part name=\"parameters\" element=\"tmp:ClientId\"/>\r\n</wsdl:message>\r\n\r\nYou'll have to create a new element, wich makes it hard to use i a corporate environment, where you have to use standard elemnts - Thus this is not a valid option, even though it works:\r\n<wsdl:message name=\"getByIdRequest2\">\r\n  <wsdl:part name=\"parameters\" element=\"tmp:ClientId_Clone\"/>\r\n</wsdl:message>\r\n\r\nThis bug has been here for a while, any movement against a solution?\r\n\r\nSo far I have to create a WSDL for each operation, which is not very PHP-smooth!"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 62,
    "fields": {
      "bug": 49169,
      "user": "rkm at nykredit dot dk",
      "content": "Adding to the above comment - If first SoapServer fails to read your WSDL properly, it will end up calling all known methods of the object added to SoapServer.\r\n- By \"known\" I mean, that if the .wsdl describes *another* binding to *another* method, than the one called - The other method gets called as well, and the result added to the <SOAP-ENV:Header> tag in the return."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 63,
    "fields": {
      "bug": 49169,
      "user": "hoffmeister dot c at gmx dot de",
      "content": "This is no bug. I guess you used style=\"document\" in the wsdl file operation description. In this case there is no operation name passed from the client to the server. Try style=\"rpc\" (remote procedure call) instead. That works pretty well."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 64,
    "fields": {
      "bug": 49169,
      "user": "rkm at nykredit dot dk",
      "content": "Well, maybe the RPC-protocol will work, but where I work, it is mandatory to create services using style=\"document\", and it really isn't to the advantage of PHP to tell the servicepeople in the Java dept. that we can't handle \"document\" styles.\r\n\r\nActually I circumvented the problem, by putting all the message definitions in separate files, which I then include in the schema-part of the wsdl.\r\nThen PHP can handle the soap:binding style=\"document\" just fine, so the problem only occurs if the names are duplicated within the same file."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 65,
    "fields": {
      "bug": 49169,
      "user": "jeroen at asystance dot nl",
      "content": "Just wanted to verify this bug is still present in 5.3.3"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 66,
    "fields": {
      "bug": 49169,
      "user": "mrice at canarylabs dot com",
      "content": "This bug appears to still be present in 5.3.6.\r\n\r\nI need help on how to use the workaround of: “Actually I circumvented the \r\nproblem, by putting all the message definitions in separate files, which I then \r\ninclude in the schema-part of the wsdl.\r\nThen PHP can handle the soap:binding style=\"document\" just fine, so the problem \r\nonly occurs if the names are duplicated within the same file.”\r\n\r\nWe are recreating a web service from an already existing one and existing \r\nclients need to work.\r\n\r\nHow do you include the message definitions in separate files as stated above?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 67,
    "fields": {
      "bug": 49169,
      "user": "reto at casserini dot com",
      "content": "Another workaround. \r\n\r\nInstead of\r\n\r\n    <message name=\"getCourses\">\r\n        <part name=\"parameters\" type=\"xsd:int\"/>\r\n    </message>\r\n    <message name=\"getUsers\">\r\n        <part name=\"parameters\" type=\"xsd:int\"/>\r\n    </message>\r\n\r\nwhich always leads to a call of the first operation \"getCourses\", I define two new types:\r\n\r\n    <xsd:element name=\"getCoursesInput\" type=\"xsd:int\"/>\r\n    <xsd:element name=\"getUsersInput\" type=\"xsd:int\"/>\r\n\r\nand use them for the messages:\r\n\r\n    <message name=\"getCourses\">\r\n        <part name=\"parameters\" element=\"tns:getCoursesInput\"/>\r\n    </message>\r\n    <message name=\"getUsers\">\r\n        <part name=\"parameters\" element=\"tns:getUsersInput\"/>\r\n    </message>\r\n\r\nworks fine for me."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 68,
    "fields": {
      "bug": 49169,
      "user": "php dot net at exby dot com",
      "content": "I still can't believe this is not fixed. Can we get someone from php.net to respond to this - whether or not there is any intention to fix this?? I really don't want to use JAVA for setting up services \r\nbut so far PHP's inability to correctly understand the soapaction header is forcing me in this direction.\r\n\r\nAnd no, I can't switch to rpc/encoded and it's not a 'fix'. Document Literal is by far the more used paradigm outside of the PHP world - and web services are often implemented in the Enterprise space.\r\n\r\nPlease, somebody fix this."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 69,
    "fields": {
      "bug": 49169,
      "user": "ben at redsnapper dot net",
      "content": "Still not fixed. Extremely annoying."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 70,
    "fields": {
      "bug": 49169,
      "user": "mail at mailforspam dot com",
      "content": "7 years... I really hate you core team."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 71,
    "fields": {
      "bug": 49169,
      "user": "mwintoch at wp dot pl",
      "content": "This issue still exists on PHP 7.2, even with Zend\\Soap 2.7"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 72,
    "fields": {
      "bug": 49169,
      "user": "requinix@php.net",
      "content": "OP's link is no good anymore and I know very little of SOAP. Does someone have a client+server+WSDL example I can test with?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 73,
    "fields": {
      "bug": 49270,
      "user": "felipe@php.net",
      "content": "This patch isn't enough to get PHP building. It just fix the PDO part, but there are other issues yet."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 74,
    "fields": {
      "bug": 49270,
      "user": "kassner@php.net",
      "content": "I created a simple pull request that I think solves this bug:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 75,
    "fields": {
      "bug": 49270,
      "user": "ejrx7753 at gmail dot com",
      "content": "Experienced this on OS X. It is a general Linux issue, not fixed in 7. In reply to the suggested pull request, I think it is a bad idea. All that is needed is to output a proper warning if spaces are used. There are too many incompatibilities to attempt to fix."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 76,
    "fields": {
      "bug": 49874,
      "user": "Sjoerd@php.net",
      "content": "Thank you for your bug report. Does your test.csv file start with a BOM? You can determine this by viewing the file in a hex editor. If it starts with fffe or feff, it has a BOM (byte order mark)."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 77,
    "fields": {
      "bug": 49874,
      "user": "jketterl at chipxonio dot de",
      "content": "thanks for having a look\r\n\r\ni tried with and without. the challenge is to get it working without, because that's the worst case my app has to deal with, but the BOM doesn't seem to solve this.\r\n\r\n$ hexdump test-with-bom.csv\r\n0000000 feff 004c 0069 006e 0065 0020 0030 0031\r\n0000010 000a 004c 0069 006e 0065 0020 0030 0032\r\n0000020 000a 004c 0069 006e 0065 0020 0030 0033\r\n0000030 000a 004c 0069 006e 0065 0020 0030 0034\r\n0000040 000a\r\n0000042\r\n\r\n$ php test.php\r\nstring(8) \"Line 01\r\n\"\r\nstring(8) \"Line 02\r\n\"\r\nstring(8) \"Line 01\r\n\"\r\nstring(5) \"e 01\r\n\"\r\n\r\ni also tried opening the file including the BOM without a stream filter, but that just resulted in php reading in two extra chars (the BOM converted in some way i guess) on the beginning of the first line.\r\n\r\ni thought i'd attach the sample files to this bug, but it seems like i can't. i've uploaded them here instead:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 78,
    "fields": {
      "bug": 49874,
      "user": "yohgaki@php.net",
      "content": "It seems 5.5 has this problem still\r\n\r\nstring(8) \"Line 01\r\n\"\r\nstring(8) \"Line 02\r\n\"\r\nstring(8) \"Line 01\r\n\"\r\nstring(5) \"e 01\r\n\"\r\n[yohgaki@dev php-5.4]$ php -v\r\nPHP 5.5.4 (cli) (built: Sep 19 2013 13:06:40)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 79,
    "fields": {
      "bug": 49874,
      "user": "paul dot smith at deepseaplc dot com",
      "content": "I'm also having this problem with the zlib.deflate filter in PHP 5.6.20.\r\n\r\nI attempted to append a user filter after zlib.deflate with the intention of totalling the datalen of the buckets. The filter() function is called but stream_bucket_make_writeable($in) returns null. I suspect this is related to the ftell problem."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 80,
    "fields": {
      "bug": 49874,
      "user": "php at bohwaz dot net",
      "content": "Same issue with zlib:\r\n\r\n<?php\r\n\r\n$fh = fopen('php://temp', 'w+');\r\n\r\nfwrite($fh, '123');\r\nvar_dump(ftell($fh));\r\n\r\nstream_filter_append($fh, 'zlib.deflate', STREAM_FILTER_WRITE, 9);\r\n\r\nfwrite($fh, 'abc');\r\n\r\nvar_dump(ftell($fh));\r\n\r\nfseek($fh, 0);\r\nvar_dump(fread($fh, 1024));\r\n\r\nfclose($fh);\r\n\r\n?>\r\n\r\nWill return:\r\n\r\nint(3)\r\nint(3)\r\nstring(3) \"123\"\r\n\r\nSee:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 81,
    "fields": {
      "bug": 49874,
      "user": "phofstetter at sensational dot ch",
      "content": "This is an inherent problem with all filters that keep internal state (which is probably all but the simplest): There's no way a filter can learn about seeking on the underlying stream and thus it can't reset its internal state.\r\n\r\nIt's a tricky problem though: For any seek() but a seek() going to the beginning of the stream, it's pretty much impossible to correctly rebuild the internal filter state after seeking on the stream.\r\n\r\nI think what should happen in order to save other people the trouble in the future is to mark streams with filters attached as non-seekable."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 82,
    "fields": {
      "bug": 50293,
      "user": "pajoye@php.net",
      "content": "I think the case is clear, it looks like we do not use VCWD or php stream's api and it fails to get the actual CWD.\r\n\r\nI will take a look at it asap."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 83,
    "fields": {
      "bug": 50293,
      "user": "kalle@php.net",
      "content": "I added a roughly untested patch for this, as I have some issues getting openssl to work in my build env, so the patch is more a theory of how it could be fixed."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 84,
    "fields": {
      "bug": 50293,
      "user": "cmb@php.net",
      "content": "I think full stream support is out of scope for any of the stable\r\nversions (and there is already"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 85,
    "fields": {
      "bug": 50892,
      "user": "jani@php.net",
      "content": "RTFM:\r\n\r\n\"Members declared protected can be accessed only within the class itself and by inherited and parent classes.\""
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 86,
    "fields": {
      "bug": 50892,
      "user": "EdwardDrapkin at gmail dot com",
      "content": "I did \"RTFM\" and I understand that protected members are not SUPPOSED TO BE ABLE to be accessed from anything but \"within the class itself and by inherited and parent classes.\"  The bug is that, when the calling scope resolves and LOOKS LIKE the correct scope because it is an inherited class, but is a _different inherited class_ of the same parent object in which the protected member was declared, the engine allows access to protected members from OUTSIDE THE CLASS.\r\n\r\nIn the example, both \"bar\" and \"kid\" extend foo, but \"kid\" should NOT have access to bar's protected members, but it does, but its resolving scope looks similar to the correct scope that would need to resolve.\r\n\r\nThis isn't an RTFM issue, it's a legitimate bug.  Did you read the reproduce code?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 87,
    "fields": {
      "bug": 50892,
      "user": "colder@php.net",
      "content": "Even though it feels odd, it's how the checks are currently designed.\r\n\r\nThe same applies to i.e. Java. I guess we cannot change things here \r\nwithout introducing nasty and hard to track BC breaks."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 88,
    "fields": {
      "bug": 50892,
      "user": "johannes@php.net",
      "content": "That's a fundamental part of a class based inheritance system.Changing this won't only affect BC but also the fundamental design."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 89,
    "fields": {
      "bug": 50892,
      "user": "colder@php.net",
      "content": "At a second glance, it really looks like it is wrong.\r\n\r\nThe visibility check should also be based on the object from which the \r\nproperties are read.\r\n\r\nAs for my \"it works that way in Java\" argument, it contradicts the java \r\nspecifications:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 90,
    "fields": {
      "bug": 50892,
      "user": "php at b8r dot org",
      "content": "It causes more problems then the original poster notes.  We've run into problems using __get and __set. Since php see's the member as \"in scope\" for both classes, the __get and __set methods don't get called."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 91,
    "fields": {
      "bug": 50892,
      "user": "php at b8r dot org",
      "content": "Our problem differs slightly from this issue, but I think they share a root cause.  Here's a sample of code with the expected outcome.\r\nabstract class A {\r\n    /**\r\n     * undocumented function\r\n     *\r\n     * @return void\r\n     */\r\n    public function __get($propertyName)\r\n    {\r\n        $val = $this->$propertyName;\r\n        echo \"Current Value of '{$propertyName}' is '{$val}'\\n\";\r\n        return $val;\r\n    }\r\n    \r\n    public function __set($propertyName, $propertyValue)\r\n    {\r\n        echo \"Setting Property '{$propertyName}'  to '{$propertyValue}'\\n\";\r\n        $this->$propertyName = $propertyValue;\r\n    }\r\n}\r\n\r\nclass B extends A {\r\n    protected $name;\r\n    \r\n    public function populateName($val) {\r\n        $a = 'name';\r\n        $this->$a = $val;\r\n    }\r\n    \r\n    public function testit() {\r\n        $b = new B();\r\n        $b->name = 'internal';\r\n        $b->name;\r\n    }\r\n}\r\n\r\n$two = new B();\r\n$two->name = 'external';\r\n$two->name;\r\n\r\n$two->testit();\r\n\r\nExpected Results:\r\n-----------------\r\nSetting Property 'name'  to 'external'\r\nCurrent Value of 'name' is 'external'\r\nSetting Property 'name'  to 'internal'\r\nCurrent Value of 'name' is 'internal'\r\n\r\nActual Results:\r\n----------------\r\nSetting Property 'name'  to 'external'\r\nCurrent Value of 'name' is 'external'"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 92,
    "fields": {
      "bug": 50892,
      "user": "normandiggs at gmail dot com",
      "content": "Another one example, even without \"extends\":\r\n\r\nclass Page_Element\r\n{\r\n        protected $name = 'name*';\r\n\r\n        public function __construct(Page_Element $child = null)\r\n        {\r\n            echo $this->name;\r\n            echo $child->name;\r\n        }\r\n\r\n}\r\n\r\nnew Page_Element(new Page_Element(null));\r\n\r\n(from"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 93,
    "fields": {
      "bug": 50892,
      "user": "arth dot inbox at gmail dot com",
      "content": "normandiggs, your sample is irrelevant.\r\nIt's ok to access private and protected properties from same type object.\r\nIt's bad to access protected properties from different type object.\r\n\r\nWhy I hate this behavior:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 94,
    "fields": {
      "bug": 50892,
      "user": "cmb@php.net",
      "content": "| There is no design ground to accept that, it is a bug. The\r\n| question that remains is: is it worth to fix BC-wise?\r\n\r\nIMHO the question is rather: when is the BC break acceptable? 7.1\r\nor 8.0?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 95,
    "fields": {
      "bug": 50892,
      "user": "mail at pmmaga dot net",
      "content": "A PR was prepared to fix this on the current master (7.2) but it was decided the the potential BC break could possibly be too much for a minor and it was suggested that it should wait for the next major."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 96,
    "fields": {
      "bug": 50892,
      "user": "rowan dot collins at gmail dot com",
      "content": "This may seem odd, but is actually perfectly reasonable if you consider polymorphism:\r\n\r\n- Access is class-based, not instance-based: you can call private members of a different instance of the same class.\r\n- For the same reason, you can access protected members on an instance of a parent class.\r\n- If you ask for an instance of class A, you may at run-time actually receive an instance of some sub-class of A.\r\n- So, if classes B1 and B2 both inherit from A, a method on class B1 might ask for an instance of A, and be given an instance of B2; when it calls a method on that instance, it's the definition in B2 which will be accessed.\r\n\r\nHere's a concrete example:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 97,
    "fields": {
      "bug": 50892,
      "user": "rowan dot collins at gmail dot com",
      "content": "Sorry, slight mistake in my example: to be equivalent to this report, the Subclass::add(ParentClass $other) method should be declared on one of the child classes. But it still works in both languages:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 98,
    "fields": {
      "bug": 50892,
      "user": "arth dot inbox at gmail dot com",
      "content": "We should not to stand on other language behavior.\r\n\r\nOne more time:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 99,
    "fields": {
      "bug": 50892,
      "user": "giovanni at giacobbi dot net",
      "content": "I agree with arth dot inbox at gmail dot com, the original bug report is wrong but this actually should be filed as a new bug imho:\r\n\r\nReproduce code:\r\n---------------\r\nclass C {\r\n  protected $x = 10;\r\n}\r\nclass D extends C {\r\n  public function m(C $c) {\r\n    print \"x=\" . $c->x . \"\\n\";\r\n  }\r\n}\r\nclass E extends C {\r\n  protected $x = 20;\r\n}\r\n$d = new D();\r\n$e = new E();\r\n$d->m($d);\r\n$d->m($e);\r\n\r\nExpected result:\r\n----------------\r\nx=10\r\nx=10      /* note 10, NOT 20! */\r\n\r\nActual result:\r\n--------------\r\nx=10\r\nPHP Fatal error:  Uncaught Error: Cannot access protected property E::$x in Standard input code:9\r\nStack trace:\r\n#0 Standard input code(21): D->m(Object(E))\r\n#1 {main}\r\n  thrown in Standard input code on line 9"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 100,
    "fields": {
      "bug": 50892,
      "user": "rowan dot collins at gmail dot com",
      "content": ">"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 101,
    "fields": {
      "bug": 50892,
      "user": "rowan dot collins at gmail dot com",
      "content": "@giovanni:\r\n\r\nWhy would the expected behaviour there be to print 10? Re-declaring a property doesn't create a second property with the same name, it changes it polymorphically just like re-declaring a method does. Either the method can see the value 10, or it cannot see any value.\r\n\r\nclass C {\r\n  protected $x = 10;\r\n  public function m() {\r\n    print \"x=\" . $this->x . \"\\n\";\r\n  }\r\n}\r\nclass D extends C {\r\n  protected $x = 20;\r\n}\r\n$d = new D();\r\n$d->m(); // \"x=20\""
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 102,
    "fields": {
      "bug": 51056,
      "user": "jani@php.net",
      "content": "Isn't this same (or related) as"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 103,
    "fields": {
      "bug": 51056,
      "user": "magicaltux@php.net",
      "content": "This report looks a bit like"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 104,
    "fields": {
      "bug": 51056,
      "user": "magicaltux@php.net",
      "content": "Confirmed with PHP_5_3\r\n\r\nTesting PHP version: 5.3.3-dev\r\nfread took 0.07ms to read 8 bytes\r\nfread took 5.06ms to read 256 bytes\r\nfread took 1000.10ms to read 53 bytes\r\nfread took 5.03ms to read 256 bytes\r\nfread took 1000.11ms to read 53 bytes\r\nfread took 5.04ms to read 256 bytes\r\nfread took 1000.10ms to read 53 bytes\r\n\r\nI'll need a bit more time for PHP_5_2 as flex-2.5.4 is becoming more \r\ndifficult to find."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 105,
    "fields": {
      "bug": 51056,
      "user": "felipe@php.net",
      "content": "Testing PHP version: 5.2.13RC3-dev\r\nfread took 0.04ms to read 8 bytes\r\nfread took 4.88ms to read 256 bytes\r\nfread took 1000.04ms to read 53 bytes\r\nfread took 4.96ms to read 256 bytes\r\nfread took 1000.06ms to read 53 bytes\r\nfread took 4.97ms to read 256 bytes\r\nfread took 1000.06ms to read 53 bytes\r\n(etc)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 106,
    "fields": {
      "bug": 51056,
      "user": "magicaltux@php.net",
      "content": "I tried to switch to non-blocking mode. This solves this issue with \r\nmost sockets, except for SSL sockets when transmitting a lot of data.\r\n\r\nThis bug is blocking in my case (socket communication transmitting a \r\nlot of data)."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 107,
    "fields": {
      "bug": 51056,
      "user": "magicaltux@php.net",
      "content": "While for file sockets it makes sense when reading data to make sure a \r\nbuffer gets completly filled until EOF is reached, this is not true \r\nfor sockets.\r\n\r\nThere is already a condition for \"greedy read\", but it does not apply \r\nwhen we first restore data from the read buffer.\r\n\r\nHere is a diff (PHP_5_3) that solves the issue:\r\n\r\nIndex: main/streams/streams.c\r\n===================================================================\r\n--- main/streams/streams.c\t(r?vision 295152)\r\n+++ main/streams/streams.c\t(copie de travail)\r\n@@ -592,6 +592,10 @@\r\n \t\t\tsize -= toread;\r\n \t\t\tbuf += toread;\r\n \t\t\tdidread += toread;\r\n+\r\n+\t\t\t/* avoid trying to read if we already have \r\ndata to pass */\r\n+\t\t\tif (stream->wrapper != \r\n&php_plain_files_wrapper)\r\n+\t\t\t\tbreak;\r\n \t\t}\r\n \r\n \t\t/* ignore eof here; the underlying state might have \r\nchanged */\r\n\r\n\r\nTest script output:\r\n\r\nTesting PHP version: 5.3.3-dev\r\nfread took 0.07ms to read 8 bytes\r\nfread took 5.07ms to read 256 bytes\r\nfread took 0.00ms to read 45 bytes\r\nfread took 1000.11ms to read 8 bytes\r\nfread took 5.02ms to read 256 bytes\r\nfread took 0.00ms to read 45 bytes\r\nfread took 1000.13ms to read 8 bytes\r\nfread took 5.04ms to read 256 bytes"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 108,
    "fields": {
      "bug": 51056,
      "user": "jani@php.net",
      "content": "btw. If you really want someone to do something about this, post the patch to internals@lists.php.net as well. :)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 109,
    "fields": {
      "bug": 51056,
      "user": "lbarnaud@php.net",
      "content": "Hi,\r\n\r\nI made a test case for this ( 51056.phpt.txt )\r\n\r\nfread() in C has exactly the same behavior, it will block if you try to read more bytes than available.\r\n\r\nYour patch correctly avoids this, however it introduces an other issue: fread() will return less data than asked for, even if enough data is available ( 51056-2.phpt.txt )."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 110,
    "fields": {
      "bug": 51056,
      "user": "magicaltux@php.net",
      "content": "Hi,\r\n\r\nI know about fread() returning less data than asked for, however I could not \r\nmodify this behaviour without passing some kind of value to lower-level read \r\noperation, which will call poll() if socket is blocking.\r\nWhen data is already available in buffer, an information should be passed to the \r\nlower-level read() to let it know it should not block.\r\n\r\nThe only non-intrusive solution to fix this would be to temporarly pass socket \r\nin non-blocking mode if data was found in PHP buffer.\r\n\r\nConsidering any application handling data from network should handle cases when \r\nreceived data is not complete, I believe it was best to return immediatly if \r\ndata is found and let the application call fread() again rather than trying to \r\nworkaround this problem with a dirty solution like passing temporarly in non-\r\nblocking mode.\r\nAnother solution would be to add an argument to the internal read call (\"do not \r\nblock\") however it would change the API for the internal stream api, and would \r\nrequire the argument to be handled into each stream wrapper."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 111,
    "fields": {
      "bug": 51056,
      "user": "lbarnaud@php.net",
      "content": "> When data is already available in buffer, an information should be passed to the lower-level read() to let it know it should not block.\r\n\r\nThis will block anyway when the buffer is empty and you won't be able to known when it is empty, so you can't rely on this (sometimes it will block, sometimes not).\r\n\r\nAlso, some applications may rely on the blocking and will break if it is changed. This behavior exists since at least PHP 5.1.\r\n\r\n> Considering any application handling data from network should handle cases when received data is not complete\r\n\r\nAs this is not the normal case I would suggest to introduce some timeout handling (this is what applications like e.g. Apache does, I guess), or fixing what prevents you from using non blocking i/o with SSL streams instead."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 112,
    "fields": {
      "bug": 51056,
      "user": "magicaltux@php.net",
      "content": "> This will block anyway when the buffer is empty and you won't be able to known \r\nwhen it is empty, so you can't rely on this (sometimes it will block, sometimes \r\nnot).\r\n\r\nPHP always calls poll() before read, so it knows if there is nothing to read. \r\nstream_select() will return the socket as \"ready\" if there is data pending in \r\nphp buffer (even if there's no data on the socket), just so we can read it.\r\n\r\n> Also, some applications may rely on the blocking and will break if it is \r\nchanged. This behavior exists since at least PHP 5.1.\r\n\r\nfread() manual explicitly warns about this:\r\n\r\nWhen reading from anything that is not a regular local file, such as streams \r\nreturned when reading remote files or from popen() and fsockopen(), reading will \r\nstop after a packet is available. This means that you should collect the data \r\ntogether in chunks as shown in the examples below.\r\n\r\nOn the contrary, using blocking streams together with stream_select() may lead \r\nto async program blocking because stream_select() saw there was pending data, \r\nbut a new packet will not arrive anytime soon.\r\n\r\n> As this is not the normal case I would suggest to introduce some timeout \r\nhandling (this is what applications like e.g. Apache does, I guess), or fixing \r\nwhat prevents you from using non blocking i/o with SSL streams instead.\r\n\r\nIt is the normal case to receive less than expected data as documented on the \r\nphp manual.\r\nApache (or any correctly coded networking app) does not uses timeouts (except to \r\ndetect dead clients), instead it uses read() which is reliable (ie. not hang \r\nwhen there is data that can be returned).\r\n\r\nBy the way I have looked at what causes the problem I have with SSL streams, and \r\nit could be worked around by switching the streamd between blocking mode and \r\nnon-blocking mode depending on the situation, however I would prefer to avoid \r\nthat (and it doesn't change the fact that fread() does not comply with what is \r\nexpected from it, both from read() syscall behaviour and php's manual)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 113,
    "fields": {
      "bug": 51056,
      "user": "lbarnaud@php.net",
      "content": "> Apache [...] uses timeouts [...] to detect dead clients\r\n\r\nThis is what I was meaning :) (and I though you was meaning this too : \"application handling data from network should handle cases when received data is not complete\")\r\n\r\nDead clients, or situations like this are not the \"normal case\", and sometimes this can be handled with timeouts.\r\n\r\nIf you are in situations where this is the normal case, one solution is to use non blocking streams.\r\n\r\nThe following code does exactly what you are asking for (if there is something to read, return it; else, block) :\r\n\r\nstream_set_blocking(..., 0);\r\nwhile (stream_select(...)) {\r\n  $data = fread(...);\r\n}\r\n\r\nIf it does not works with SSL streams, then SSL stuff should be fixed instead."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 114,
    "fields": {
      "bug": 51056,
      "user": "magicaltux@php.net",
      "content": "I still believe fread() should not hang when it has data it can return. The C \r\ncounterpart doesn't, and the manual says it doesn't.\r\n\r\nRegarding test 51056-2.phpt.txt the manual explicitly says that this *can \r\nhappen* on anything else than files (read warning in example #3 on"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 115,
    "fields": {
      "bug": 51056,
      "user": "lbarnaud@php.net",
      "content": "> I still believe fread() should not hang when it has data it can return.\r\n\r\nIt follows fread() behavior since years and I believe it should not change.\r\n\r\n> The C counterpart doesn't\r\n\r\nC's fread() does :)\r\n\r\n> and the manual says it doesn't.\r\n\r\nThe manual looks wrong on this point, \"reading will stop after a packet is available\" is never true, whatever packet means.\r\n\r\nfread() (both PHP's and C's) returns less data than asked only on EOF or errors.\r\n\r\nThe only reliable way of doing non-blocking i/o is still to use non-blocking streams ;-)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 116,
    "fields": {
      "bug": 51056,
      "user": "magicaltux@php.net",
      "content": "So, it is normal for php's fread() to return immediatly when less data than asked is available, unless this data arrived while a previous call of fread() was done and there was \r\ntoo much data ?\r\n\r\nLet me just state that this doesn't makes sense.\r\n\r\nI tested stdc's fread() and could confirm that its behaviour is consistent: it will only return when it has collected the data it needed, when EOF is reached or when an error \r\noccurs.\r\n\r\nIt seems that PHP's php_stream_read() is closer to read() syscall than to stdc's fread(), except for this one specific behaviour.\r\n\r\n> It follows fread() behavior since years and I believe it should not change.\r\n\r\nI believe the problem comes from the new streams api which is an attempt to make the socket api obsolete. In fact stream functions (including fread()) behave the same way the \r\nold socket counterpart did when passed a socket.\r\n\r\nThe correct behaviour (as defined by common sense, and confirmed by PHP 4.4.9) :\r\n\r\nTesting PHP version: 4.4.9\r\nsocket_read took 0.06ms to read 8 bytes\r\nsocket_read took 5.08ms to read 256 bytes\r\nsocket_read took 0.01ms to read 45 bytes\r\nsocket_read took 0.08ms to read 8 bytes\r\nsocket_read took 5.06ms to read 256 bytes\r\nsocket_read took 0.01ms to read 45 bytes\r\nsocket_read took 0.07ms to read 8 bytes\r\nsocket_read took 5.05ms to read 256 bytes\r\nsocket_read took 0.01ms to read 45 bytes\r\nsocket_read took 0.08ms to read 8 bytes\r\n\r\nTesting with PHP 5.1.0 (first version containing stream_socket_pair()) exhibits a change of behaviour due to the new stream api.\r\n\r\nBoth tests 51056.phpt and 51056-2.phpt pass on PHP 4.4.9.\r\n\r\nBy the way using nonblocking mode makes no sense with provided example. It would just make the program use 100% cpu. For example a PHP program reading an email from a POP3 \r\nserver might lockdown because of this bug in blocking mode. If end of email is reached while a read is in progress and a new read is called, it will block until the server \r\ncloses connections (expected behaviour = return remaining data).\r\n\r\nAs a PHP sockets programmer (I believe my experience when it comes to php and sockets is not negligeable) I say once more that *this* fread()'s behaviour is not consistent. \r\nfread() in blocking mode should block until it has enough bytes or return as soon as some bytes are avaialble. Blocking should not depend on when data has arrived."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 117,
    "fields": {
      "bug": 51056,
      "user": "lbarnaud@php.net",
      "content": "I see your point in wanting read() behavior. Whether or not to implement fread() or read() one is arguable. However the specific behavior you are asking for is not reliable for several reasons, and IMHO (I may be wrong) you want this behavior for bad reasons. Let me explain this :\r\n\r\n> By the way using nonblocking mode makes no sense with provided example. It would just make the program use 100% cpu.\r\n\r\nThis is why you don't want to use non-blocking streams. If you use stream_select() you will never end up using 100% CPU : Your PHP process will only do an idle wait in stream_select() and consume no CPU at all.\r\n\r\nExample :\r\n\r\nstream_set_blocking($stream, 0);\r\nwhile (stream_select($r,$w,$e, $stream, $sec, $usec)) { /* block until data is available for read and/or write in $stream. */\r\n  $data = fread($stream, 8192); /* read all available data, up to 8192 bytes. Returns only 1 byte if only 1 byte is available and never blocks. */\r\n}\r\n\r\n\r\n> If end of email is reached while a read is in progress and a new read is called, it will block until the server closes connections\r\n\r\nWith your patch (or with the read behavior you want) it will still block. And it will block randomly, in an unpredictable manner.\r\n\r\nPlease see the following example :\r\n\r\nSay the buffer has 250 bytes in it.\r\nfread(100) -> buffer.length-=100, buffer.length == 100\r\nfread(100) -> buffer.length-=100, buffer.length == 50\r\nfread(100) -> with your patch it would return the last 50 available bytes\r\n\r\nNow this other example with a buffer with only 200 bytes in it :\r\n\r\nSay the buffer has 200 bytes in it.\r\nfread(100) -> buffer.length-=100, buffer.length == 100\r\nfread(100) -> buffer.mength-=100, buffer.length == 0\r\nfread(100) -> buffer is 0, this blocks, and you can't control this (you don't control the buffer, and don't know anything about it in a php script)\r\n\r\nPlease see 51056-3.phpt.\r\n\r\nWith current behavior it will block too, but in a predictable maner."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 118,
    "fields": {
      "bug": 51056,
      "user": "cataphract@php.net",
      "content": "The bug reported in right on this issue.\r\n\r\nAs it stands, it is completely unpredictable whether an fread call will block.\r\n\r\nThe point of putting a stream into the readfs set of stream_select is to know whether a call to fread will block or not. stream_select has an emultaion feature that returns the stream if the stream buffer has data, even if there's no more data to be read on the socket. See"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 119,
    "fields": {
      "bug": 51056,
      "user": "cataphract@php.net",
      "content": "A small correction: it's not that \"never reads from the socket more than one packet at a time\" as I and the manual say. It's that it does only one call to recv().\r\n\r\nIf we're blocking waiting for data and a packet arrives, then recv() will return only the contents of that packet (\"The receive calls normally return any data available, up to the requested amount, rather than waiting for receipt of the full amount requested.\"). However, if several packets have been received since the last call to fread, recv() will return the most data it can, possibly several packets.\r\n\r\nBut this is a minor documentation issue and not very relevant in this discussion."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 120,
    "fields": {
      "bug": 51983,
      "user": "sergo_s at bk dot ru",
      "content": "I met problem \"No input file specified\" in the configuration of lighttpd 1.4.26 + php-5.3.2 + fastcgi/php-fpm when requesting addresses like index.php/myMethod/ (kohanaframework based site). I found that $_SERVER[PATH_INFO] is NULL.\r\n(More about my problem in this post:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 121,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "Have you tried your patch with other webservers than nginx and lighttpd ?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 122,
    "fields": {
      "bug": 51983,
      "user": "konstantin at symbi dot org",
      "content": "99% of fpm installations are with nginx or lighty, using fpm sapi with non-FSM \r\nwebservers is at least very strange. But I have just checked it with \r\nApache+mod_fastcgi in a simplest configuration:\r\n\r\nDocumentRoot \"/var/www\"\r\nFastCgiExternalServer /var/www -socket /tmp/php-fpm.sock\r\n<Directory /var/www>\r\n    Options FollowSymLinks +ExecCGI\r\n    AllowOverride   All\r\n    Order           Allow,Deny\r\n    Allow           from all\r\n</Directory>\r\n\r\nand it works OK.\r\n\r\nThe patch contains comments in the top of the new init_request_info() \r\nimplementation. It describes why fastcgi parameters are mapped to the script \r\nfilename in this way, and it was chosen after examining CGI specs, typical fpm \r\nconfigurations, and common sense.\r\n\r\nBTW, those webservers like old IIS versions with buggy cgi implementations which \r\nrequired that awkward way of guessing what they meant, for which the original \r\nimplementation of init_request_info() was designed, do not support remote \r\nFastCGI at all."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 123,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "I'm asking about Apache, to be certain not to ban some webservers from using \r\nFPM.\r\n\r\nAccording to"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 124,
    "fields": {
      "bug": 51983,
      "user": "konstantin at symbi dot org",
      "content": "FPM sapi implements remote fastcgi only (also known as \"external FastCGI\").\r\nSo it is limited to web servers which support it.\r\n\r\nI have tested Nginx, Lighttpd, and Apache mod_fastcgi.\r\n\r\nFor other webservers listed, are there ones which of them support remote \r\nfastcgi? At least I am sure that IIS does not (even with its latest fastcgi \r\nimplementations, I've asked this question on IIS FastCGI forums). As far as I \r\nknow, thttpd does not, too."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 125,
    "fields": {
      "bug": 51983,
      "user": "konstantin at symbi dot org",
      "content": "And of course I never say we should do anything with the CGI/FCGI sapi. I am sure \r\nits implementation must not be chanhed 'cause it was tested with many webservers \r\nduring years. I am speaking only about FPM sapi which is much more specific."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 126,
    "fields": {
      "bug": 51983,
      "user": "tony2001@php.net",
      "content": "Jerome, I agree that we should drop this fix_pathinfo stuff - it makes no sense to adopt all the freaky things from CGI API. \r\nThe patch requires some extensive testing, though, that's clear. But I don't think we should keep in mind of all the web-servers you mentioned.\r\nApache, nginx & lightty are my biggest concern, others can be safely dropped (or assumed working). \r\nYou can forget about IIS anyway, FPM doesn't support Windows."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 127,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "I mentioned all the web servers to make sure we agree on doing this.\r\n\r\nI totaly agree on making this change. This pathinfo thing sucks for real."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 128,
    "fields": {
      "bug": 51983,
      "user": "konstantin at symbi dot org",
      "content": "btw, current fix_pathinfo implementation has security problems:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 129,
    "fields": {
      "bug": 51983,
      "user": "slim at inbox dot lv",
      "content": "after applying the patch php compiled with debug complain on every request:\r\n\r\nFeb 01 14:26:38.214800 [WARNING] [pool www] child 16257 said into stderr: \"[Tue Feb  1 14:26:38 2011]  Script:  '-'\"\r\nFeb 01 14:26:38.214846 [WARNING] [pool www] child 16257 said into stderr: \"/var/tmp/portage/dev-lang/php-5.3.5-r100/work/sapis-build/fpm/sapi/fpm/fpm/fpm_main.c(1116) :  Freeing 0x08B95CBC (23 bytes), script=-\"\r\nFeb 01 14:26:38.214857 [WARNING] [pool www] child 16257 said into stderr: \"=== Total 1 memory leaks detected ===\"\r\nFeb 01 14:26:40.535416 [WARNING] [pool www] child 16258 said into stderr: \"[Tue Feb  1 14:26:40 2011]  Script:  '-'\"\r\nFeb 01 14:26:40.535466 [WARNING] [pool www] child 16258 said into stderr: \"/var/tmp/portage/dev-lang/php-5.3.5-r100/work/sapis-build/fpm/sapi/fpm/fpm/fpm_main.c(1116) :  Freeing 0x08B95EA4 (23 bytes), script=-\"\r\nFeb 01 14:26:40.535477 [WARNING] [pool www] child 16258 said into stderr: \"=== Total 1 memory leaks detected ===\"\r\n\r\na line at fpm_main.c(1116) causing this is \r\nSG(request_info).request_uri = request_uri ? estrndup(request_uri, strcspn(request_uri, \"?\")) : NULL;"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 130,
    "fields": {
      "bug": 51983,
      "user": "felipe@php.net",
      "content": "What is the status of this?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 131,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "I'm dequeuing FPM bugs. I've started with the simple ones. This one is on my todo \r\nlist. I don't have an ETA right now.\r\n\r\n++ Jerome"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 132,
    "fields": {
      "bug": 51983,
      "user": "felipe@php.net",
      "content": "Ah okay, I was wondering if it already has been closed. Thanks."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 133,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "Warning: the following comment is very long. Take time to read it and don't \r\nhesitate to ask me for details questions.\r\nNotes: I've not been able to put it all in one comment (it's detected as spam). \r\nSo I've split it into several comments.\r\n\r\nI just review de patch and there is a problem.\r\n\r\nIt does not work with mod_fastcgi except when mod_fastcgi is configured as \r\ncommented before:\r\n\r\nDocumentRoot \"/var/www\"\r\nFastCgiExternalServer /var/www -socket /tmp/php-fpm.sock\r\n<Directory /var/www>\r\n    Options FollowSymLinks +ExecCGI\r\n    AllowOverride   All\r\n    Order           Allow,Deny\r\n    Allow           from all\r\n</Directory>\r\n\r\nSetting this make all requests to be forward to php-fpm and that is definitely \r\nNOT what common configurations aim to do.\r\n\r\nMore common mod_fastcgi configuration would be something like:\r\n\r\nScriptAlias /fcgi-bin/ /usr/local/apache2/fcgi-bin/\r\nFastCGIExternalServer /usr/local/apache2/fcgi-bin/php-cgi -host 127.0.0.1:9000\r\nAddHandler php-fastcgi .php\r\nAction php-fastcgi /fcgi-bin/php-cgi\r\n\r\nand in this case, the patch does not work."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 134,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "but let's analyse all this:\r\n\r\nFastCGI defines a communication protocol above CGI 1.1 (which is defined in RFC \r\n3875).\r\nSo fastcgi client/servers should be RFC 3875 compliant\r\n\r\n\r\nFrom RFC 3875:\r\nUsefull required request variables are:\r\n- PATH_INFO\r\n- PATH_TRANSLATED\r\n- QUERY_STRING\r\n- SCRIPT_NAME\r\n\r\nAnd the variable which are NOT defined in the RFC:\r\n- DOCUMENT_ROOT\r\n- SCRIPT_FILENAME\r\n- REQUEST_URI\r\n\r\nHere is a comparison of common web server behaviour to see what values they send \r\nto FPM. See"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 135,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "If FPM would be RFC 3875 compliant, it should:\r\n- set document_root in its own configuration\r\n- execute the script set by concatening its own document_root and SCRIPT_NAME\r\n\r\nAs all web servers are sending DOCUMENT_ROOT correctely, FPM should:\r\n- execute the script set by concatening DOCUMENT_ROOT and SCRIPT_NAME\r\n\r\nIn this two cases, nginx and lighttpd would still work, mod_fastcgi should work \r\ndepending on how it's being used and proxy_mod_fcgi whould just not work.\r\n\r\n\r\nas apache 2.3 is still beta, I hope we could have them change mod_proxy_fcgi \r\nbehaviour \r\nin order to be RFC 3875 compliant... (I've opened a bug report:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 136,
    "fields": {
      "bug": 51983,
      "user": "konstantin at symbi dot org",
      "content": "Hello,\r\n\r\nHere are a few quick thoughts.\r\n\r\n1) The fix_pathinfo stuff has been implemented a long ago, and it's main purpose \r\nwas to workaround the bugs of web servers used 10 years ago. It was \r\ndeveloped with the CGI exec()s in mind so the performance impact caused by \r\nmultiple stat()s was not so important. I see no reason to keep it \r\nnowadays.\r\n\r\n2) The patch I have proposed hase a bug mentioned in a comment above, that must \r\nbe fixed. I personally just use fix_patninfo=0 now ;)\r\n\r\n3) The CGI protocol itself has been developed (as far as I understand) with a \r\nthought that there's some monolithic application which takes PATH_INFO, \r\nparses it, does something and prints the results. With PHP applications, there's \r\nusually another case - we need to map the request variables to a physical \r\npath to the php script, the same way as web server SAPIs do. It does not conform \r\nto any RFCs but that's how people DO use PHP, and that's a behavior everyone \r\nexpects in 99.9999% cases.\r\n\r\n4) The non-standard SCRIPT_FILENAME fastcgi variable is widely used in many \r\nconfigurations, and there are standard config samples for nginx etc which rely \r\non \r\nthe fact that it has been working for years.\r\n\r\n5) Your proposal seems mostly OK but I'd prefer if the SCRIPT_FILENAME remains \r\nsupported.\r\n\r\nMy proposal would be close to yours:\r\n\r\nI. Add the 'fcgi.accept_script_filename' per-pool ini setting, default true;\r\n\r\nII. Add the document_root.override per-pool ini setting, default empty.\r\n\r\nIII. Remove all the fix_pathinfo stuff, and change the corresponding parts of \r\nthe init_request_info function according to the pseudocode:\r\n\r\nfunction get_script_filename(ini, Env) {\r\n    var script_filename;\r\n    if (ini[\"fcgi.accept_script_filename\"] == true && Env[\"SCRIPT_FILENAME\"] is \r\nnot empty) {\r\n        script_filename = Env[\"SCRIPT_FILENAME\"];\r\n    } else {\r\n         doc_root = undefined;\r\n         assert(Env[\"SCRIPT_NAME\"] is not empty); // *\r\n         if (ini[\"document_root.override\"] is not empty) {\r\n             doc_root = ini[\"document_root.override\"];\r\n         } else {\r\n             assert(Env[\"DOCUMENT_ROOT\"] is not empty);\r\n             doc_root = Env[\"DOCUMENT_ROOT\"];\r\n         }\r\n         script_filename = concat(doc_root, Env[\"SCRIPT_NAME\"]);\r\n    }\r\n    return script_filename;\r\n}\r\n\r\n*) assert() means 'respond with status 500 if assertion fails'.\r\n\r\nThe RFC3875 compliance can be achieved by defining document_root.override and \r\nsetting fcgi.accept_script_filename = false."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 137,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "hi,\r\n\r\nthx for the feedback. For SCRIPT_FILENAME, I know it became a pseudo standard. \r\n\r\nBut as the concatenation of DOCUMENT_ROOT and SCRIPT_NAME results in  \r\nSCRIPT_FILENAME, I don't really see why you want to keep it with yet another fpm \r\nconfiguration line ? Maybe I missed something :)\r\n\r\n++ Jerome"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 138,
    "fields": {
      "bug": 51983,
      "user": "konstantin at symbi dot org",
      "content": "I remember I've seen a configuration which passed SCIPT_FILENAME but no \r\nDOCUMENT_ROOT. (In nginx, you can define any fastcgi variables in the \r\nconfiguraton file, there's nothing hardcoded). I have no idea how many such \r\nconfigurations exist, may be that one was the single of its kind in the world. \r\nBut it would be definitely wrong to break anything in the 5.3.x branch.\r\n\r\nWell, that extra ini setting is probably really unneeded. May be just leave \r\nsupport for SCRIPT_FILENAME (handle it always it if is not empty) in 5.3.x, and \r\ndrop it in 5.4?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 139,
    "fields": {
      "bug": 51983,
      "user": "slim at inbox dot lv",
      "content": "probably it is worth to have additional setting to set webserver in use and select appropriate handling method.\r\nSomething like \"web_server = compliant | apache | iis | anything\"\r\nthis will simplify appending of hacks for custom implementations of fastcgi protocol"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 140,
    "fields": {
      "bug": 51983,
      "user": "konstantin at symbi dot org",
      "content": "IIS? FPM does not support Windows, and IIS does not support remote FastCGI. Either \r\nISAPI or local FCGI (via the cgi-fcgi SAPI) are used togerher with IIS, there's \r\nnothing about fpm.\r\n\r\nFor all other known webservers, both Jerome's and my proposals should work fine \r\nAFAIK."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 141,
    "fields": {
      "bug": 51983,
      "user": "mabi at gentoo dot org",
      "content": "What's the status of this? Any chance we can have that fixed for 5.4?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 142,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "After having analyzing comments, apache behaviour, here is what I propose for this case.\r\n\r\n1- add a fpm configuration directive for each pool named \"fastcgi_client\". Possible values are \"rfc3875\", \"apache_mod_fastcgi\", \r\n\"apache_mod_proxy_fcgi\" or \"backward_compatibility\". Defaults to \"rfc3875\".\r\n\r\n2- add a fpm configuration directive for each pool named \"document_root\". It can be set to a directory. Defaults to (null).\r\n\r\n3- add a fpm configuration directive for each pool named \"always_run_script\". It can be set to a php file. Defaults to (null)\r\n\r\nWhen a request is received:\r\n/*\r\n *  Use a custom script to do some routage and other stuf\r\n *  In this case FPM does nothing but to passthrough fastcgi variables\r\n */\r\nif (fpm.ini[always_run_script] is set) {\r\n  return execute_php(fpm.ini[always_run_script])\r\n}\r\n\r\n/*\r\n *  override DOCUMENT_ROOT if document_root is set in the FPM config\r\n *  otherwise check the DOCUMENT_ROOT sent is a valid directory \r\n */ \r\nif (fpm_ini[document_root] is set) {\r\n  DOCUMENT_ROOT = fpm.ini[document_root]\r\n  // no need to check if DIR exits as it's been done at conf check\r\n} else {\r\n  if (DOCUMENT_ROOT is not set) {\r\n    return error500 \"document root not set\"\r\n  }\r\n  if (!is_dir(DOCUMENT_ROOT)) {\r\n    return error500 \"Documentroot not found or not a directory\"\r\n  }\r\n}\r\n\r\n\r\nif (fpm.ini[fastcgi_client] == \"backward_compatibility\") {\r\n  /*\r\n   * Use the same code as before (with microsoft clean up)\r\n   * Will maybe be removed in a later release.\r\n   */\r\n   \r\n  see fpm_main.c in function init_request_info()       \r\n\r\n}else if (fpm.ini[fastcgi_client] == \"apache_mod_fastcgi\" or \"apache_mod_proxy_fcgi\") {\r\n /*\r\n  *     *** mod_fastcgi ***\r\n  *    \r\n  *  SCRIPT_NAME is invalid  (/php5-fcgi)\r\n  *  PATH_INFO is set to /test.php/more\r\n  *  SCRIPT_FILENAME is invalid (/tmp/php5-fcgi)\r\n  *  DOCUMENT_ROOT is set correctly\r\n  *  PATH_TRANSLATED = DOCUMENT_ROOT + PATH_INFO\r\n  *  REQUEST_URI is set correctly\r\n  *  QUERY_STRING is set correctly\r\n  *  \r\n  *  ==> use DOCUMENT_ROOT + PATH_INFO                           \r\n  */\r\n\r\n  /*\r\n  *     *** mod_proxy_fcgi ***\r\n  *    \r\n  *  everything is buggy in mod_proxy_fcgi\r\n  *  PATH_TRANSLATED is set only if proxy-fcgi-pathinfo is set\r\n  *  PATH_TRANSLATED is set to \"proxy:fcgi://host:port\" + PATH_INFO\r\n  *  sometimes PATH_TRANSLATED is set to \"proxy:fcgi://host:port\" + PATH_INFO*2\r\n  *   --> we can rely on PATH_TRANSLATED no matter what\r\n  *          \r\n  *  PATH_INFO is set only if proxy-fcgi-pathinfo is set\r\n  *  PATH_INFO is set to /test.php/more\r\n  *  SCRIPT_NAME is empty if proxy-fcgi-pathinfo is set\r\n  *  SCRIPT_NAME has the same value as PATH_INFO when proxy-fcgi-pathinfo is set\r\n  *   --> we can rely on one of those value. They are the same depending on\r\n  *       proxy-fcgi-pathinfo        \r\n  *\r\n  *  SCRIPT_FILENAME value is consistent and set to \r\n  *  \"proxy:fcgi://host:port\" + PATH_INFO\r\n  *           \r\n  *  DOCUMENT_ROOT is set correctly\r\n  *  QUERY_STRING is set correctly  \r\n  *      \r\n  *  ==> we will use PATH_INFO or SCRIPT_NAME and DOCUMENT_ROOT  \r\n  */\r\n\r\n  if (fpm.ini[fastcgi_client] == \"apache_mod_fastcgi\") {\r\n    unset SCRIPT_NAME /* will use PATH_INFO instead */ \r\n  }\r\n\r\n  /* automatic detection for mod_proxy_fcgi */\r\n  if (SCRIPT_NAME null or empty) {\r\n    SCRIPT_NAME = PATH_INFO\r\n    unset PATH_INFO\r\n  }\r\n  \r\n  if (SCRIPT_NAME is empty) {\r\n    return error500(\"SCRIPT_NAME or PATH_INFO not set\")\r\n  }\r\n\r\n  /* override PATH_TRANSLATED */  \r\n  PATH_TRANSLATED = DOCUMENT_ROOT + SCRIPT_NAME   \r\n  \r\n  if (php.ini[fix_pathinfo] == 1) {\r\n    /*\r\n     *  Try to determine SCRIPT_FILENAME and PATH_INFO from PATH_TRANSLATED      \r\n     */      \r\n     For each '/' in PATH_TRANSLATED begining from the end of the string {\r\n       SCRIPT_FILENAME = path before the '/'\r\n       PATH_INFO = path after the '/' (with the '/' included)\r\n       if SCRIPT_FILENAME is a valid file {\r\n         PATH_TRANSLATED = DOCUMENT_ROOT + PATH_INFO\r\n         return execute_php(SCRIPT_FILENAME)\r\n       }\r\n       return error404 \"file not found\"        \r\n     }\r\n  } else {\r\n    /*\r\n     *  Suppose PATH_TRANSLATED is DOCUMENT_ROOT + SCRIPT_NAME\r\n     *  ignore PATH_TRANSLATED and PATH_INFO     \r\n     */\r\n     SCRIPT_FILENAME = PATH_TRANSLATED\r\n     unset PATH_TRANSLATED\r\n     return execute_php(SCRIPT_FILENAME)            \r\n  }    \r\n\r\n} else { /* rfc3875 */\r\n  /*\r\n   *  simple as descript in RFC 3875\r\n   *  let PATH_INFO and PATH_TRANSLATED to their value\r\n   *  change nothing as we are supposed to be rfc compliant :-)      \r\n   */   \r\n  \r\n  if (SCRIPT_NAME not set) {\r\n    return error500 \"SCRIPT_NAME not set\"\r\n  }\r\n\r\n  SCRIPT_FILENAME = DOCUMENT_ROOT + SCRIPT_NAME \r\n  return execute_php(SCRIPT_FILENAME)\r\n}\r\n\r\n\r\n- \"rfc3875\" makes things very easy and quick for nginx, lighthttpd and other compliant fastcgi clients. php.ini fix_pathinfo is not \r\nused in this case.\r\n\r\n- \"apache_mod_fastcgi\" and \"apache_mod_proxy_fcgi\" makes the code cleaner for apache. Correct values are deducted. php.ini \r\nfix_pathinfo is still used. If path_info URL are not used, fix_pathinfo can be disabled to avoid doing useless and costy calls to \r\nstats(). It would be maybe possible to use only one value \"apache\" and detect which one is used. But I prefer not to to be able to \r\ndifferentiate them later if need (as proxy_mod_fcgi could hopefully be updated to fix some of its bugs)\r\n\r\n- \"backward_compatibility\" for those who have older version of apache or else which is not compatible with the previous mode. \r\nHopefully it won't be needed and will be removed in a later release.\r\n\r\nwhat guys do you think ???\r\n\r\n++ jerome"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 143,
    "fields": {
      "bug": 51983,
      "user": "konstantin at symbi dot org",
      "content": "Do the issues with apache_mod_fastcgi still exist? I remember I've tested it \r\nwith my patch and it worked well, maybe you've missed some of its settings?\r\n\r\nPersonally I don't like introducing such \"magic\" settings which are unclear on \r\nwhat they do. It reminds me of that crappy \"broken-scriptfilename\" and \"fix-\r\nroot-scriptname\" lighttpd fastcgi settings. I indeed prefer the nginx way where \r\nevery fastcgi variable is configured explicitly.\r\n\r\nIn general it's OK, but I world prefer more obvious settings with names telling \r\nabout real fastcgi parameters. It's the matter of taste of course.\r\n\r\nAnyway, there are two things to take into account: known clients, and backward \r\ncompatibility for any possible configuration. We need to remember that this is \r\n_remote_ fastcgi, and php-fpm may run on a different machine. For instance, I \r\nhave seen a real life nginx configuration which looked like:\r\n\r\nset $remote_php_root /path/to/remote/php/root;\r\nSCRIPT_FILENAME $remote_root_php/$fastcgi_script_name;\r\n\r\nand DOCUMENT_ROOT was defined to the front web server root. It is senseless, but \r\nit worked: SCRIPT_FILENAME was correct, and the php code did not use \r\n$_SERVER['DOCUMENT_ROOT'] at all.\r\n\r\nAlso, these changes really should not go to php 5.4 (or go with \"compat\" mode by \r\ndefault). There already have been a BC-breaking change with \r\nsecurity.limit_extensions in minor update, I believe no one wants one more."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 144,
    "fields": {
      "bug": 51983,
      "user": "fat@php.net",
      "content": "> Do the issues with apache_mod_fastcgi still exist? I remember I've tested it \r\n> with my patch and it worked well, maybe you've missed some of its settings?\r\n\r\nUsing a global mod_fastcgi configuration (where everything is sent to FPM) \r\nreturns full compliant fastcgi envars which are compatible \r\nwith the \"rfc3875\" mode.\r\nUsing a specific mod_fastcgi configuration (AddHandler, AddAction and Alias) \r\nreturns buggy fastcgi envars which are compatible with the \r\n\"apache_mod_fastcgi\" mode.\r\n\r\n> Personally I don't like introducing such \"magic\" settings which are unclear on \r\n> what they do. It reminds me of that crappy \"broken-scriptfilename\" and \"fix-\r\n> root-scriptname\" lighttpd fastcgi settings. I indeed prefer the nginx way \r\nwhere \r\n> every fastcgi variable is configured explicitly.\r\n\r\nI hear you. I don't really mind since the \"magic\" settings are documented and \r\nexplain what they do. A simple explication \"use \r\napache_mod_fastcgi is your are using mod_fastcgi using ScriptAlias, \r\napache_mod_proxy_fcgi if your using mod_proxy_fcgi, compliant \r\notherwise. If you encouters problems, you can back to backward_compatibility\". \r\nAnd then a more specific explication\r\n\r\n\"apache_mod_fastcgi: The SCRIPT_FILENAME is deduced using DOCUMENT_ROOT + \r\nPATH_INFO. If fix_pathinfo is set, then a reverse search is \r\nmade on the string to find out the SCRIPT_FILENAME part and the PATH_INFO part \r\nby testing (using stat()3) the SCRIPT_FILENAME to ensure \r\nit exists on disk.\"\r\n\r\n\"apache_mod_proxy_fcgi: the SCRIPT_FILENAME is deduced using DOCUMENT_ROOT + \r\n(PATH_INFO || SCRIPT_NAME). Auto detection is used wether \r\nto choose PATH_INFO or SCRIPT_NAME (it depends on the proxy-fcgi-pathinfo \r\nsettings). If fix_pathinfo is set, the same treatment is done \r\nthan it's done for apache_mod_fastcgi\"\r\n\r\n\"rfc3875: SCRIPT_FILENAME is deduced using DOCUMENT_ROOT + SCRIPT_NAME. No other \r\nactions are taken as the PATH_INFO stuff is done by \r\nthe web server\"\r\n\r\n\"backward_compatibility: old code untouched. Will maybe be removed in later \r\nmajor release\"\r\n\r\n\r\n> In general it's OK, but I world prefer more obvious settings with names \r\ntelling \r\n> about real fastcgi parameters. It's the matter of taste of course.\r\n\r\nWhat do you have in mind ?\r\n\r\nAnother possibility would be to set the transormation rules inside of fpm \r\nconfiguration with something like:\r\n\r\nenvvar[SCRIPT_FILENAME] = \"%{DOCUMENT_ROOT}%{SCRIPT_NAME}\"\r\nenvvar[SCRIPT_NAME] = \"%{PATH_INFO}\r\n\r\nand keep the usage of fix_pathinfo. If set, SCRIPT_FILENAME is searched for real \r\nfile and PATH_INFO. Otherwise nothing is done.\r\nIn the comments, for each kind of configuration (mod_fastcgi, mod_proxy_fcgi, \r\nnginx, lighttpd) the right settings are documented.\r\n\r\nIn the case, nothing is changed, try to make autodetection based on \r\nSERVER_SOFTWARE maybe.\r\n\r\nBut, even if it's more detailed it's maybe too complex.\r\n\r\n\r\n\r\n> Anyway, there are two things to take into account: known clients, and backward \r\n> compatibility for any possible configuration. We need to remember that this is \r\n> _remote_ fastcgi, and php-fpm may run on a different machine. For instance, I \r\n> have seen a real life nginx configuration which looked like:\r\n> \r\n> set $remote_php_root /path/to/remote/php/root;\r\n> SCRIPT_FILENAME $remote_root_php/$fastcgi_script_name;\r\n> \r\n> and DOCUMENT_ROOT was defined to the front web server root. It is senseless, \r\nbut \r\n> it worked: SCRIPT_FILENAME was correct, and the php code did not use \r\n> $_SERVER['DOCUMENT_ROOT'] at all.\r\n\r\nIn all the cases we can't match all the possible solutions, especially ones for \r\nnginx as everything can be setup as desired.\r\nSuch a configuration is marginal, I think, and a little change won't kill anyone \r\n(I think).\r\n\r\n> Also, these changes really should not go to php 5.4 (or go with \"compat\" mode \r\nby \r\n> default). There already have been a BC-breaking change with \r\n>security.limit_extensions in minor update, I believe no one wants one more.\r\n\r\nAgree. The code will be put in 5.3, 5.4 and 5.5 but the default settings will be \r\nset to \"rfc3875\" only for 5.5 (if it's not been \r\nreleased yet)."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 145,
    "fields": {
      "bug": 52065,
      "user": "manuel at mausz dot at",
      "content": "Can someone please finally take a look at this?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 146,
    "fields": {
      "bug": 52065,
      "user": "nick at aussiecom dot com",
      "content": "Why hasn't this bug been resolved? It's nearly 2 years old..."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 147,
    "fields": {
      "bug": 52065,
      "user": "mein at e3b dot org",
      "content": "This bug is also present in php 5.4..."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 148,
    "fields": {
      "bug": 52065,
      "user": "cmb@php.net",
      "content": "The patch open-basedir-without-realpath would fix this issue, but\r\nit might have security implications or other undesired side\r\neffects."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 149,
    "fields": {
      "bug": 52065,
      "user": "pajoye@php.net",
      "content": "Any news on this one? Edge case but still :)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 150,
    "fields": {
      "bug": 52065,
      "user": "cmb@php.net",
      "content": "Considering the amount of closely related bug reports[1], I\r\nwouldn't necessarily call that an edge case, Pierre. :)\r\n\r\nI'll make a PR based on my patch with some tests, if no one beats\r\nme to it.\r\n\r\n[1] I've assembled a maybe non-exhaustive list in\r\n<"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 151,
    "fields": {
      "bug": 52065,
      "user": "jan dot prachar at gmail dot com",
      "content": "Broken since 5.3.0, see"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 152,
    "fields": {
      "bug": 52065,
      "user": "a19836 at gmail dot com",
      "content": "Why isn't this bug fixed yet?\r\nIt was detected in 2013 or even before. And already passed 5 years... \r\n\r\nI trying the following example with PHP 7 and I'm getting exactly the same error.\r\n\r\n<?\r\nini_set(\"open_basedir\", __DIR__);\r\nfile_put_contents(__DIR__ . \"/foo.txt\", \"bar\");\r\necho \"EXISTS:\".file_exists(__DIR__ . \"/foo.txt/\");\r\n?>\r\n\r\nError: PHP Warning:  file_exists(): open_basedir restriction in effect. File(/var/www/html/test/foo.txt/) is not within the allowed path(s): (/var/www/html/test) in /var/www/html/test/test.php on line 4\r\n\r\nCan you please fix this and let me know please?\r\nThanks"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 153,
    "fields": {
      "bug": 52065,
      "user": "sriccio at swisscenter dot com",
      "content": "We're seeing this in all the PHP versions we use (5.6, 7.0, 7.1, 7.2).\r\n\r\nLiterally spent hours trying to understand why we have these warning even that the paths are allowed in the open_basedir directive.\r\n\r\nFinally it was because the parent dir of a path was in fact a file and not a dir.\r\n\r\nThe warning message is really misleading...\r\n\r\nIt would really be nice to fix this"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 154,
    "fields": {
      "bug": 52065,
      "user": "michael dot vorisek at email dot cz",
      "content": "Please fix asap, reported by many users. Thank you."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 155,
    "fields": {
      "bug": 52065,
      "user": "php dot stephan at lippe-net dot de",
      "content": "Cool, a bug described in 2010 not even fixed in PHP 8.0RC3.\r\nThat's a statement!"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 156,
    "fields": {
      "bug": 52065,
      "user": "bugs-php dot a2 at x25 dot pl",
      "content": "cat a.php\r\n<?\r\nini_set(\"open_basedir\",\"/home/naox/public_html/test\");\r\nmkdir(\"/home/naox/public_html/test\");\r\n\r\nphp a.php\r\n\r\nWarning: mkdir(): open_basedir restriction in effect. File(/home/naox/public_html/test) is not within the allowed path(s): (/home/naox/public_html/test) in /home/naox/public_html/naox.vipserv.org/a.php on line 3"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 157,
    "fields": {
      "bug": 52065,
      "user": "cmb@php.net",
      "content": "> […] but it might have security implications […]\r\n\r\nIndeed, it would.  Passing FALSE as 5th parameter to\r\nexpand_filepath_with_mode() actually means CWD_EXPAND, and that\r\nwould not resolve symlinks.\r\n\r\nA possible solution for the issue would be to change\r\nphp_check_specific_open_basedir() so that it returns different\r\nvalues for failure (currently it always returns -1, what should\r\nactually be FAILURE), so that the caller could distinguish between\r\nan actual open_basedir violation, and an invalid path (as is the\r\ncase here; files can't have subdirectories).  However. the functon\r\nis exported, so changing the result values would be a BC break\r\n(and a rather delicate at that).\r\n\r\nAn alternative would be to introduce another function, say\r\nphp_check_specific_open_basedir_ex() which gives more detailed\r\nfailure information, but frankly, why not simply change the error\r\nmessage?\r\n\r\nOf course, one may argue that \"file checking\" functions, such as\r\nis_readable() or is_file() should not warn at all, but simply\r\nrreturn false, but again, that would require to modify the\r\nexisting funtion, or to introduce a new one, because currently\r\nthere is no such distintion when checking for potential\r\nopen_basedir violations.  A global flag to the rescue?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 158,
    "fields": {
      "bug": 52065,
      "user": "rtrtrtrtrt at dfdfdfdf dot dfd",
      "content": "> why not simply change the error\r\n> message?\r\n\r\nbecause any message is a problem to begin with and more important: in most of the cases you get a message that a path which is obviously within open_basedir isn't  \r\n\r\nyou could even check that and be silent given that when i see that as human with the blink of an exe why shouldn't a computer?\r\n\r\n> Of course, one may argue that \"file checking\" functions, such as\r\n> is_readable() or is_file() should not warn at all, but simply\r\n> rreturn false, but again, that would require to modify the\r\n> existing funtion\r\n\r\nand *that* is the point after decades where this annoying behavior exists - wenn i ask from inside the application if a file exists i don't care why i can't reach it (don't exist, no permissions, open_basedir)\r\n\r\nespecially on systems with error_reporting E_ALL on purpose and sending twice per hours log collections with a \"fix it\" policy it's really annoying and when you also have a don't use @ for error supression policy you are doomed"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 159,
    "fields": {
      "bug": 52376,
      "user": "pajoye@php.net",
      "content": "Can you try to follow the advice here please:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 160,
    "fields": {
      "bug": 52376,
      "user": "ryan at kisc dot edu dot np",
      "content": "Well, that allows me to browse to the folder via chrome and essentially does the \r\nsame thing as the \r\nworkaround from #50542 but only on the one folder which could work. What it does \r\nnot appear to do \r\nis give me programmatic access to the folder. The instructions in that KB are \r\noutdated as it uses \r\nadsutil.vbs and the setting is the same as the \"Physical Path Credentials\" from \r\nthe IIS manager. \r\nThis could work, in a much less than ideal way, if there is some way to run \r\n\"opendir\" on the \r\nvirtual directory without specifying the unc path (since the UNC path itself \r\nstill does not work). \r\nI could just be unaware of how, since it seems to use the system paths and not \r\nhonor or even \r\nacknowledge virtual directories. I tried lots of different formats against my \r\nbetter judgement but \r\nnone worked. I even tried using the http path reference. Still no joy. I've used \r\nPHP since 1998 but \r\nrealize something could have changed at any one of the releases, however I'm not \r\nsure I see how a \r\nvirtual directory could solve the ability to use opendir. Fair enough if this \r\nwas just a try. I'm \r\nhappy to keep trying if it can help the community. This worked fabulously in \r\nIIS6. I also confess \r\nthat it appears to be Microsoft's fault. Very frustrating.\r\n\r\nI wonder if I can create a symbolic link equivalent. I've done this before in \r\nolder versions of \r\nwindows, but I don't think I've ever done it to a network share. In my case I \r\nmay be able to just \r\nmove the share to the IIS server and be done with it, but I'm willing to stick \r\nthis out if it will \r\nhelp find a solution to this issue."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 161,
    "fields": {
      "bug": 52376,
      "user": "ryan at kisc dot edu dot np",
      "content": "sorry about the line breaks, apparently this site doesn't like what Chrome does when I resize the text box. I'll be more careful in the future. Actually this site seems to hate Chrome altogether. \r\nI keep getting \"incorrect username\" constantly. The bug site is buggy, at least in Chrome."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 162,
    "fields": {
      "bug": 52376,
      "user": "aharvey@php.net",
      "content": "(Restoring status.)\r\n\r\nAs a fellow Chrome user, I feel your pain. :)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 163,
    "fields": {
      "bug": 52376,
      "user": "mark at internode dot on dot net",
      "content": "Hi I am having the same problem with PHP 5.3.5 running under IIS 7.5, FastCGI, Windows Server 2008 R2 where I am simply trying to access a file on another server using a UNC path.\r\n\r\n$uploadfile = \"\\\\<server>\\<share>\\<folder>\\<file>.txt\";\r\n$fh = fopen($uploadfile, 'r') or die(\"Can't open file $uploadfile\");\r\n\r\nI have tried granting \"everyone\" full permissions for the share and the file system but it still does not work.\r\n\r\nThis code works perfectly if the file is stored on the same server and is accessed through a local path.\r\n\r\nOther things I have tried inlcude:\r\n- setting the defaultappool to use a specific user and granting that user permissions on the share and file system\r\n- using \"network\" as above\r\n\r\nAny other ideas on this one?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 164,
    "fields": {
      "bug": 52376,
      "user": "marc dot seitz at ww-informatik dot de",
      "content": "Hi Guys,\r\n\r\nwe have exactly the same problem now.\r\nWe want to migrate to Windows Server 2008 R2 with IIS 7.5, FastCGI, PHP 5.3.6.\r\n\r\nWhen I try to do a file_get_contents(<UNC-PATH>) or opendir(<UNC-PATH>) I always will get the error:\r\nWarning: fopen(<UNC-PATH-TO-FILE>): failed to open stream: Permission denied in D:\\inetpub\\wwwroot\\XXX.php on line 26\r\n\r\nThe Application-Pools of the IIS are running under a Domain-Account which has access to the Network Share.\r\n\r\nI don't know how to solve this problem.\r\n\r\nAny ideas of you?\r\n\r\nThanks \r\nMarc"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 165,
    "fields": {
      "bug": 52376,
      "user": "em at ducommun dot ch",
      "content": "I have exactly the same problem.\r\n\r\nI have tried to map the share to a letter, exemple Z:/ same result.\r\nThis is not a permissions problem.\r\n\r\nPlease help.\r\n\r\nConfig: xampp running under w2k3r2 server, with php 5.3.5\r\n\r\nThanks!"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 166,
    "fields": {
      "bug": 52376,
      "user": "mike dot riendeau at gmail dot com",
      "content": "I fixed this in Win7 IIS7 Through the inetmgr.\r\nWebSite->Authentication->Anonymous Authentication (edit on side panel)\r\nI changed the Specific User (IUSR) to Application pool identity.\r\nI am only using it for local development, so I'm not sure how this affects security."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 167,
    "fields": {
      "bug": 52376,
      "user": "alexkyrlis at me dot com",
      "content": "Greetings,\r\n\r\nI have the same problem, expect that, when testing this script:\r\n\r\n<?PHP\r\nerror_reporting(E_ALL);\r\nopendir(\"//node1/wwwroot/public/joomla\");\r\n?>\r\n\r\nI get no errors, PHP actually likes this path, no problem.\r\nBut, this same path is not accepted by Windows. Instead, the correct path that \r\nWindows 2008 (and IIS) recognizes is:\r\n\r\n\\\\node1\\wwwroot\\public\\joomla\r\n\r\nThis is quite an annoying problem. Windows likes \\ and php likes / in the path.\r\n\r\nAny ideas?\r\n\r\nThanks\r\nAlex"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 168,
    "fields": {
      "bug": 55138,
      "user": "an0nym at narod dot ru",
      "content": "This issue can be worked around by adding $statement->bindParam(\":test\", \r\n$test>>>, PDO::PARAM_STR, 4000<<<), however this does not fix the bug itself."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 169,
    "fields": {
      "bug": 55138,
      "user": "dernelson at corelogic dot com",
      "content": "This issue also affects PDOStatement::bindValue(), which does not have the 4th parameter \"length\" like bindParam() does, so the workaround is not always possible."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 170,
    "fields": {
      "bug": 55639,
      "user": "kolya at telepark dot ua",
      "content": "Margins qop and nc should not be quoted (defined by RFC)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 171,
    "fields": {
      "bug": 55831,
      "user": "bjori@php.net",
      "content": "Are you planning on commit this patch?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 172,
    "fields": {
      "bug": 60707,
      "user": "laruence@php.net",
      "content": "max_input_vars is used to protected from ddos attack, IMO it's not a big deal :)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 173,
    "fields": {
      "bug": 60961,
      "user": "megazubr at gmail dot com",
      "content": "Centos 5.8, php 5.4.4 compiled from source with --enable-fpm\r\nWhen doing USR2 on master pid of php-fpm daemon\r\n1. kill child(502 Bad gatway on long_loop.php in same time)\r\n2. restart daemon with another master pid\r\n\r\nAs i see, it's not a graceful reload.\r\n\r\nmaster pid - 12788\r\nchild(long_loop.php) - 12795\r\n\r\nstrace -f -s 8000 -p 12788\r\n\r\n[pid 12795] munmap(0x2b017edd1000, 1168) = 0\r\n[pid 12795] munmap(0x2b017edd2000, 1168) = 0\r\n[pid 12795] munmap(0x2b017edd3000, 1168) = 0\r\n[pid 12795] munmap(0x2b017edb5000, 112) = 0\r\n[pid 12795] time(NULL)                  = 1342505962\r\n[pid 12795] dup2(1, 2)                  = 2\r\n[pid 12795] close(4)                    = 0\r\n[pid 12795] dup2(13, 0)                 = 0\r\n[pid 12795] geteuid()                   = 0\r\n[pid 12795] setgid(500)                 = 0\r\n[pid 12795] open(\"/proc/sys/kernel/ngroups_max\", O_RDONLY) = 4\r\n[pid 12795] read(4, \"65536\\n\", 31)      = 6\r\n[pid 12795] close(4)                    = 0\r\n[pid 12795] open(\"/etc/group\", O_RDONLY) = 4\r\n[pid 12795] fcntl(4, F_GETFD)           = 0\r\n[pid 12795] fcntl(4, F_SETFD, FD_CLOEXEC) = 0\r\n[pid 12795] fstat(4, {st_mode=S_IFREG|0644, st_size=693, ...}) = 0\r\n[pid 12795] mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, \r\n-1, 0) = 0x2b017b3ce000\r\n[pid 12795] lseek(4, 0, SEEK_CUR)       = 0\r\n[pid 12795] read(4, \r\n\"root:x:0:root\\nbin:x:1:root,bin,daemon\\ndaemon:x:2:root,bin,daemon\\nsys:x:3:roo\r\nt,bin,adm\\nadm:x:4:root,adm,daemon\\ntty:x:5:\\ndisk:x:6:root\\nlp:x:7:daemon,lp\\nm\r\nem:x:8:\\nkmem:x:9:\\nwheel:x:10:root\\nmail:x:12:mail,exim\\n"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 174,
    "fields": {
      "bug": 60961,
      "user": "php-bugs at puzzled dot xs4all dot nl",
      "content": "CentOS 6.3 with php-5.3.3 and the FPM code from 5.3.20 still has the same issue. FWIW this makes it challenging to use nginx with php-fpm because it results in a 502 Bad Gateway. I'm more than happy to help testing a patch."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 175,
    "fields": {
      "bug": 60961,
      "user": "phpbugs at oops dot mooo dot com",
      "content": "Try setting process_control_timeout to something higher than 0."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 176,
    "fields": {
      "bug": 60961,
      "user": "baohx2000 at gmail dot com",
      "content": "Having this issue on 5.5.3.  Sending USR2 to master process kills the master and \r\norphans the children.  Have to then kill all children before I can restart the \r\nmaster process."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 177,
    "fields": {
      "bug": 60961,
      "user": "ptr dot wang at gmail dot com",
      "content": "php5-fpm 5.5.8+dfsg-3+sury.org~precise+2 on ubuntu precise has the same problem.\r\nkilling USR2 signal to php5-fpm master process causes all php5-fpm processes (include the master process) replaced, and the active requests end up with HTTP 502 Bad gateway error on the nginx side."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 178,
    "fields": {
      "bug": 60961,
      "user": "yinchuan at baixing dot com",
      "content": "CentOS 6.5 + Nginx 1.4.7 + PHP 5.4.9 with php-fpm\r\n\"fastcgi_keep_conn on;\" in nginx.conf\r\nset pm.max_request=100, then when thd 100th reqest reach, php process exit, and nginx log error:\"... recv() failed (104: Connection reset by peer) while reading response header from upstream, client: XXX\"\r\n\r\nwhen set \"fastcgi_keep_conn off;\", everything is ok."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 179,
    "fields": {
      "bug": 60961,
      "user": "razvanphp at yahoo dot com",
      "content": "I have the same problem with PHP 5.4.39-0+deb7u2, latest Debian Wheezy.\r\n\r\nNginx mainline 1.9 uses unix socket connection to php-fpm, but it results in 502 when reloading php-fpm service.\r\n\r\nFound this in the code, that seems to cause this:\r\n\r\nstatic void sig_soft_quit(int signo) /* {{{ */\r\n{\r\n       int saved_errno = errno;\r\n\r\n       /* closing fastcgi listening socket will force fcgi_accept() exit immediately */\r\n       close(0);\r\n       if (0 > socket(AF_UNIX, SOCK_STREAM, 0)) {\r\n               zlog(ZLOG_WARNING, \"failed to create a new socket\");\r\n       }\r\n       fpm_php_soft_quit();\r\n       errno = saved_errno;\r\n}"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 180,
    "fields": {
      "bug": 60961,
      "user": "konrad dot baumgart at moneyhouse dot de",
      "content": "This bug affects many people, but it seems the assigned person does not contribute to bugfixing anymore.\r\n\r\nCan we get it unassigned/reassigned?\r\n\r\nBug is still present with nginx 1.10 and php 7 communicating with unix socket"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 181,
    "fields": {
      "bug": 60961,
      "user": "albertcasademont at gmail dot com",
      "content": "Yes please, a graceful reload is needed urgently. And more generally, php-fpm needs some love"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 182,
    "fields": {
      "bug": 60961,
      "user": "luke at viovet dot co dot uk",
      "content": "This is also affecting PHP 7.1 on Ubuntu 14.04 and 16.04. Please fix asap."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 183,
    "fields": {
      "bug": 60961,
      "user": "federico dot omoto at gmail dot com",
      "content": "And this is also affecting the recently released PHP 7.2.0.\r\nIs this bug expected to be fixed in the short term?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 184,
    "fields": {
      "bug": 60961,
      "user": "i at xstudio dot me",
      "content": "mark!"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 185,
    "fields": {
      "bug": 60961,
      "user": "danny dot kopping at hetzner dot co dot za",
      "content": "Hi\r\n\r\nWe have been experiencing this issue for a while, and after some investigation - we think we have isolated the issue.\r\n\r\nThis is how we understand it:\r\nWhen FPM receives a USR2 signal, it attempts to wait for its children to finish processing, and then sends a QUIT signal to each child. If a child does not respond in the amount of time defined in \"process_control_timeout\" then the master process sends a TERM.\r\n\r\nNow, while FPM is waiting for its children to terminate, it goes into a \"reloading\" state, it would seem. It prints the message \"Reloading in progress ...\" to its log. During this time, one can send as many USR2 signals to the master process as one likes - it will not cause any problems. However, if one sends a USR2 signal after the `execvp(\"/usr/sbin/php-fpm7.1\", {\"/usr/sbin/php-fpm7.1\", \"--nodaemonize\", \"--fpm-config\", \"/etc/php/7.1/fpm/php-fpm.conf\"})` syscall and before receiving the \"fpm is running, pid xxx\" log entry - then it will crash the master process and consequently all the children.\r\n\r\nOur suspicion is that the signal handling is buggy between startup time and moving into the \"ready to accept connections\" state (without looking at the source)."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 186,
    "fields": {
      "bug": 60961,
      "user": "ingo dot bez at gmx dot de",
      "content": "May I ask carefully if and when this problem will be solved?\r\nSeven years open, a patch functional since the beginning of 2017 and public for 11 months now... Wow."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 187,
    "fields": {
      "bug": 60981,
      "user": "danielc@php.net",
      "content": "The environment variables need to be established in a scope available all shell scripts.  For example, them in the ~/.bashrc script of the user executing \"make test\".\r\n\r\nSet the variables in ~/.bashrc\r\nsource ~/.bashrc\r\nmake test ....\r\n\r\nThe \"source\" step is only necessary in the first shell since the variables were not available when the shell was opened.  All future shells will have them."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 188,
    "fields": {
      "bug": 60981,
      "user": "david at davidfavor dot com",
      "content": "export var=foo is the same as sourcing a file that includes...\r\nexport var=foo\r\n\r\nProblem is no shell environment is reaching the test scripts.\r\n\r\nPlease suggest a way to turn off clearing of the environment."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 189,
    "fields": {
      "bug": 60981,
      "user": "sixd@php.net",
      "content": "Try adding E to php.ini's variables_order."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 190,
    "fields": {
      "bug": 60981,
      "user": "david at davidfavor dot com",
      "content": "That works...\r\n\r\nSo there are two doc errors...\r\n\r\n#1)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 191,
    "fields": {
      "bug": 60981,
      "user": "tyrael@php.net",
      "content": "AFAIK getenv does work independently from variable_orders:\r\nfoo=bar php -d variables_order=GPC -r 'echo $_ENV[\"foo\"];echo getenv(\"foo\");'\r\noutputs \"bar\" for me, so it works.\r\n\r\nTyrael"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 192,
    "fields": {
      "bug": 60981,
      "user": "tyrael@php.net",
      "content": "the problem is that the run-tests.php fetches the environment variables from $_ENV"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 193,
    "fields": {
      "bug": 60981,
      "user": "jpauli@php.net",
      "content": "I confirm that getenv() works regardless any .ini config.\r\nIt proxies to SAPI/system getenv()"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 194,
    "fields": {
      "bug": 60981,
      "user": "tyrael@php.net",
      "content": "'Both php.ini-production and php.ini-development contain \"GPCS\".'\r\nthe default value means that what is the value if you don't set it any way (having \r\nno php.ini or using php -n for example)\r\nunfortunately the default values and our developer/production inis aren't in sync, \r\nI brought that issue up on the mailing list in the past:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 195,
    "fields": {
      "bug": 60981,
      "user": "david at davidfavor dot com",
      "content": "Seems like adding --d variable_orders=EGPCS to run-tests is the most elegant.\r\n\r\nWhat the next step to arrange for this bug to be fixed?\r\n\r\nAlso I notice there are 4 failures in the mysqli tests. Let me know how to \r\nregister as a developer with php.net and I'll figure these out and supply \r\npatches to fix the test suite.\r\n\r\nThanks."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 196,
    "fields": {
      "bug": 60981,
      "user": "tyrael@php.net",
      "content": "\"--d variable_orders=EGPCS to run-tests\"\r\nif you mean adding that to Makefile.global (the Makefile template, which will \r\nrun run-tests.php when you execute make test) then yeah, it is an elegant \r\nsolution, but I think it would be better to fix run-tests.php itself, so for \r\nthose who call it directly (half of the core/qa people...) will also be fixed.\r\nPierre told me that there is no clean way to fetch all environment vars from a \r\nphp script if $_ENV isn't populated (you could parse it from the output of \r\nphpinfo() but that would be error-prone and messy).\r\nSo I would propose calling another php instance and fetching the environment \r\nvariables from there using shell_exec.\r\nSee the attached patch.\r\n(If somebody has a better idea, I'm all for it.)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 197,
    "fields": {
      "bug": 60981,
      "user": "david at davidfavor dot com",
      "content": "Just tested supplied patch and seems to work well."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 198,
    "fields": {
      "bug": 60981,
      "user": "tyrael@php.net",
      "content": "I've just noticed that I got the patch reversed, I fixed it, now it should apply \r\nwithout the \"Reversed (or previously applied) patch detected!  Assume -R? [n]\" \r\nquestion."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 199,
    "fields": {
      "bug": 60994,
      "user": "php dot net at boedah dot de",
      "content": "adding the full code sample as patch did not work in the first place\r\n-> attached it now"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 200,
    "fields": {
      "bug": 60994,
      "user": "ashnazg@php.net",
      "content": "Comments on my experience with this bug --"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 201,
    "fields": {
      "bug": 60994,
      "user": "ashnazg@php.net",
      "content": "PHPT test for this bug is in PR #1566 ("
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 202,
    "fields": {
      "bug": 60994,
      "user": "rstark at us dot ibm dot com",
      "content": "I have submitted a PR for this issue"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 203,
    "fields": {
      "bug": 61525,
      "user": "rkip at reprovinci dot nl",
      "content": "The returned header value could perhaps also be ltrimmed."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 204,
    "fields": {
      "bug": 61584,
      "user": "felipe@php.net",
      "content": "Thank you for this bug report. To properly diagnose the problem, we\nneed a short but complete example script to be able to reproduce\nthis bug ourselves. \n\nA proper reproducing script starts with <?php and ends with ?>,\nis max. 10-20 lines long and does not require any external \nresources such as databases, etc. If the script requires a \ndatabase to demonstrate the issue, please make sure it creates \nall necessary tables, stored procedures etc.\n\nPlease avoid embedding huge scripts into the report."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 205,
    "fields": {
      "bug": 61584,
      "user": "osama dot sorour at eformations dot net",
      "content": "It is almost impossible to make it happen on purpose. It happened in my code, \r\nwhich was thousands of lines long with about 30 classes. In addition, when it \r\nused to happen, it used to happen randomly at different locations.\r\n\r\nPlease note that regardless of reproduction, the method used in the current code \r\nto set the readline buffer is wrong. Please refer to the patch and readline \r\ndocumentation:\r\n\r\nVariable: char * rl_line_buffer\r\nThis is the line gathered so far. You are welcome to modify the contents of the \r\nline, but see 2.4.5 Allowing Undoing. The function rl_extend_line_buffer is \r\navailable to increase the memory allocated to rl_line_buffer.\r\n\r\nwhich clearly indicates that you are only allowed to change it, not replace the \r\nbuffer pointer as it is done in the current code.\r\n\r\nFrom the readline documentation, here is the correct way of completely replacing \r\nthe buffer:\r\n\r\nFunction: void rl_replace_line (const char *text, int clear_undo)\r\nReplace the contents of rl_line_buffer with text. The point and mark are \r\npreserved, if possible. If clear_undo is non-zero, the undo list associated with \r\nthe current line is cleared."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 206,
    "fields": {
      "bug": 61584,
      "user": "cmb@php.net",
      "content": "According to the official documentation[1] of readline, this is\r\nindeed an API misuse on our behalf (but these docs *might* just be\r\nmisleading).  However, I found some older docs which do not even\r\nmention rl_extend_line_buffer(), so we may need to conditionally\r\nuse that function (assuming those old versions are still\r\nrelevant).  Also we would need to check whether\r\nrl_extend_line_buffer() is supported by editline (which often\r\nserves as replacement for readline).  It is apparently not\r\nsupported by windeditline which is used for Windows builds, and\r\nI'm not sure whether changing rl_line_buffer there is supported,\r\nor if there is an alternative mechanism.\r\n\r\nSo the attached patch would need to be revised.\r\n\r\n[1] <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 207,
    "fields": {
      "bug": 61597,
      "user": "aharvey@php.net",
      "content": "I can't reproduce this:\r\n\r\n<?php\r\n$xml = <<<'EOX'\r\n<?xml version=\"1.0\"?>\r\n<parent>\r\n    <child attr=\"foo\">text content</child>\r\n</parent>\r\nEOX;\r\n\r\n$doc = simplexml_load_string($xml);\r\nprintf(\"Text content: %s; attribute: %s\\n\", $doc->child, $doc->child['attr']);\r\n?>\r\n\r\nOutputs \"Text content: text content; attribute: foo\", as I'd expect. Are you \r\nable to provide a reproduction script?\r\n\r\nThe SO discussion appears to be about JSON encoding only; given that \r\nSimpleXMLElement doesn't support serialisation, I'd suggest that the same would \r\napply to JSON encoding."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 208,
    "fields": {
      "bug": 61597,
      "user": "jplyon dot csu at gmail dot com",
      "content": "another test:\r\n\r\n$xml = <<<'EOX'\r\n<?xml version=\"1.0\"?>\r\n<data>\r\n<datum file-key=\"8708124062829849862\">corn</datum>\r\n</data>\r\nEOX;\r\n\r\n$doc = simplexml_load_string($xml);\r\n\r\necho $doc->asXML();\r\n\r\necho print_r($doc);\r\n\r\nThis is not a problem with loading for me - I am building my SimpleXML object \r\ndynamically.\r\nThe output from asXML() is correct.\r\nThe output from print_r() is not.\r\nThe output using attributes() (in a more complex example) is not correct, \r\nalthough this simple test does work.\r\n\r\nI am experiencing this on various versions of PHP 5.3.X on Windows Vista and \r\nUbuntu 11.10.\r\n\r\n(ubuntu)$ php -v\r\nPHP 5.3.2-1ubuntu4.9 with Suhosin-Patch (cli) (built: May  3 2011 00:45:52)\r\nCopyright (c) 1997-2009 The PHP Group\r\nZend Engine v2.3.0, Copyright (c) 1998-2010 Zend Technologies\r\n    with Suhosin v0.9.29, Copyright (c) 2007, by SektionEins GmbH\r\n\r\n(Windows)>php -v\r\nPHP 5.3.8 (cli) (built: Sep 22 2011 20:51:51)\r\nCopyright (c) 1997-2011 The PHP Group\r\nZend Engine v2.3.0, Copyright (c) 1998-2011 Zend Technologies"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 209,
    "fields": {
      "bug": 61597,
      "user": "aharvey@php.net",
      "content": "Ah, I see what you're getting at now. Thanks. It appears to be an issue with the \r\nget_properties and get_debug_info handlers for SimpleXMLElement.\r\n\r\nThis has been reported and closed as a duplicate before, but I think that was \r\nmistaken, as we don't have an open bug for this at present that I can find."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 210,
    "fields": {
      "bug": 61597,
      "user": "hugh at infomenta dot com",
      "content": "I am having exactly the same problem and it is not feasible to add an extra tag to all of my \"text\" entries."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 211,
    "fields": {
      "bug": 61597,
      "user": "dbai at drivenbi dot com",
      "content": "Is there any update on this one? A 3rd party PHP library I'm using has a defect \r\nwhich, I think, is caused by this problem because the phenomenon is that attribute \r\nin the XML node is not loaded, and that XML node happens to have text content."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 212,
    "fields": {
      "bug": 61597,
      "user": "tlesher at mtadistributors dot com",
      "content": "Just by way of a note, this problem is still occurring in PHP 5.5.24."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 213,
    "fields": {
      "bug": 61597,
      "user": "cmb@php.net",
      "content": "> This has been reported and closed as a duplicate before, but I\r\n> think that was mistaken, as we don't have an open bug for this\r\n> at present that I can find.\r\n\r\nThere is"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 214,
    "fields": {
      "bug": 61597,
      "user": "cmb@php.net",
      "content": "To clarify: not only attributes may be swallowed in debug output,\r\nbut also elements of mixed content."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 215,
    "fields": {
      "bug": 61597,
      "user": "cmb@php.net",
      "content": "The bad \"fix\" has been reverted – re-opnening."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 216,
    "fields": {
      "bug": 62032,
      "user": "reeze dot xia at gmail dot com",
      "content": "Hi, \r\n  I think it's a document problem. you could refer this commit:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 217,
    "fields": {
      "bug": 62032,
      "user": "iamcraigcampbell at gmail dot com",
      "content": "Well I can understand stripping it if there is a closing > somewhere, but if it is \r\na < that is not followed by a matching > then it should be allowed in the string \r\nand not stripped.  I think strip_tags works as expected."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 218,
    "fields": {
      "bug": 62032,
      "user": "reeze dot xia at gmail dot com",
      "content": "strip_tags will strip it even without the ending '>' if  '<' followed by a\r\nnon-space char.\r\n\r\nIf we need to check whether is a closed tag it is a feature request to change it's \r\nbehavior. it will break BC."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 219,
    "fields": {
      "bug": 62032,
      "user": "reeze dot xia at gmail dot com",
      "content": "PS: the reason why strip_tags() didn't strip it is '<' is followed by a\r\nspace char but not without ending '>', this is the key point.\r\n\r\nlook deep into the source code, there difference is switch whether or \r\nnot to trait '<' followed by a(or more) spaces a tag or not."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 220,
    "fields": {
      "bug": 62032,
      "user": "iamcraigcampbell at gmail dot com",
      "content": "So in that case I think strip_tags and filter_var are both broken.  In this context: \r\n\"It is true that 5<10\"\r\n\"It is true that 5 < 10\"  \r\n\r\nNeither of these are html tags so the string should not be touched regardless of if \r\nthere is a space or not."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 221,
    "fields": {
      "bug": 62032,
      "user": "pajoye@php.net",
      "content": "> or < should be encoded then, see"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 222,
    "fields": {
      "bug": 62032,
      "user": "aleksey dot v dot korzun at gmail dot com",
      "content": "How is stripping anything after < with a space is a valid operation? That seems \r\nlike a lazy man's html stripper.\r\n\r\nLet's just blindly strip everything that can possibly be made into an html tag of \r\nany sort. Not."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 223,
    "fields": {
      "bug": 62032,
      "user": "iamcraigcampbell at gmail dot com",
      "content": "@pajoye I agree with you, but there is a use case that encoding will not solve.\r\n\r\nLet's say there is a forum where users are posting.  If the user posts:\r\n\r\n\"This is <strong>NOT</strong> good!\" and the tags get encoded then that means the \r\nHTML tags will be displayed in the forum as plain text.  I think it is more expected \r\nbehavior to display this string as \"This is NOT good!\".\r\n\r\nSo one option would be encoding the < only if it is not followed by a > but that is a \r\nlot of extra work to figure that out.\r\n\r\n\r\nAt the end of the day the point is that no matter how you look at it I still think \r\nthis is a bug.\r\n\r\n$string = 'This is true: 2<5';\r\nstrip_tags($string); and filter_var($string, FILTER_SANITIZE_STRING);\r\n\r\nShould not strip out <5 since that is not an HTML tag."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 224,
    "fields": {
      "bug": 62032,
      "user": "anon at anon dot anon",
      "content": "Well I never heard of this \"SANITIZE_STRING\" filter before, but it looks just as retarded as it sounds, and about as retarded as strip_tags. 99.99% of the time, strip_tags just should not be used at all because it's horribly broken. The real bugs are (1) strip_tags exists, and (2) that PHP should imply that any kind of magical all-purpose \"string sanitization\" process could exist.\r\n\r\n@iamcraigcampbell:\r\n>Well I can understand stripping it if there is a closing > somewhere, but if it is \r\na < that is not followed by a matching > then it should be allowed in the string \r\nand not stripped.\r\nIn that case:\r\n(1) Unclosed tags will eat extra page content, breaking page layout.\r\n(2) Pages consist of many echo statements. By your logic, \"<script\" is a possibly legal string to echo, but if some later string contains a \">\", we need to implement a delayed-choice quantum eraser to make all the parallel universes in which the earlier echo statement occurred cease to exist.\r\n\r\n>I think it is more expected behavior to display this string as \"This is NOT good!\".\r\nNo. Display what users type. Don't delete text from their posts based on the quirks of what just happens to be the underlying display format on a particular day. Suppose your hypothetical forum also displays posts in another format, e.g., it has a Flash or iPhone-based app, or it tweets posts, or a few years from now we're all using a completely different markup language. Should it then also strip HTML-like tags from all text in perpetuity from all media just because HTML happened to be a relevant format to someone somewhere once upon a time, or should user-submitted text throw integrity to the wind and change depending on what kind of device someone is attempting to use to view it, whether or not that device's markup was invented when the post was made? What if someone is trying to use text that legitimately resembles an HTML tag (it happens), or, more likely, they're trying to quote or talk about HTML -- no filter can handle this. No no no no no. Display what they type and don't confuse the poor souls. I.e., use htmlspecialchars() if outputting to HTML; or if not, use whatever other escaping method is appropriate to the particular output format that still preserves the integrity of the user-typed text in that format, while making exception for the formatting markup that is legitimately supported and documented to be supported by the forum, such as markdown or bbcode syntax (and probably not HTML, since besides the fact that HTML is ugly and over-complicated for most forum post needs, strip_tags with an allowed tags parameter is the most dangerous of the lot and allows blatant abuse via attributes).\r\n\r\nAnd don't get me started on entities.\r\n\r\ntl;dr: no amount of wrapping it in flashy filter functions changes the fact that strip_tags confuses countless souls, is brain-damaged, and ought to be deprecated to death."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 225,
    "fields": {
      "bug": 62032,
      "user": "iamcraigcampbell at gmail dot com",
      "content": "@anon I agree with many of your sentiments :)\r\n\r\nJust wanted to point out one thing.  The issue of unclosed script tags or other tags \r\nwould not be a problem assuming the output is escaped which it should be.  Therefore \r\nif you had \"<script\" in the string it would end up being output as &lt;script and \r\nwould not cause the issues that you mentioned.\r\n\r\nAs for displaying what the user typed I could see an argument either way on that.  \r\nThe fact still remains that this is a bug."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 226,
    "fields": {
      "bug": 62032,
      "user": "cmb@php.net",
      "content": "I agree insofar as FILTER_SANITIZE_STRING and strip_tags() should\r\nwork identical, and I would have supposed that both share a common\r\nimplementation, what apparently isn't the case."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 227,
    "fields": {
      "bug": 62106,
      "user": "ab@php.net",
      "content": "Please test the supplied patch. Ideally you could do this with your productive \r\ndev environment. Because cleanup happens on request shutdown, looks like it's \r\nnearly impossible to test this with phpt. Consider the following piece of code:\r\n\r\n<?php\r\n\r\nset_time_limit(0);\r\nini_set('memory_limit', '768M');\r\n\r\n$zip_fname = dirname(__FILE__) . DIRECTORY_SEPARATOR . 'bug62106.zip';\r\n\r\n$s = 'a';\r\nforeach (array(1024, 1024, 200) as $b) {\r\n        $s = str_repeat($s, $b);\r\n}\r\n\r\n$zip = new ZipArchive();\r\n$r = $zip->open($zip_fname, ZipArchive::CREATE);\r\n\r\nif ($r) {\r\n        $zip->addFromString('huhu.txt', $s);\r\n\r\n        set_time_limit(3);\r\n        $zip->close();\r\n}\r\n\r\nregister_shutdown_function will not work here because it's a part of request. \r\nBut it's clearly to see - without patch there are temp files there, and with the \r\npatch the cleanup works. But the best were of course if you test it directly \r\nwith your app. If you have an idea how to test this with phpt, it would be also \r\ngreat :)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 228,
    "fields": {
      "bug": 62106,
      "user": "t dot glaser at tarent dot de",
      "content": "Hum. Unfortunately, I cannot bring a self-compiled PHP into the production \r\nsystem, especially as it runs Debian lenny still. But within some time, I \r\nshould be able to test the patch on Debian wheezy, on a test instance, by \r\nusing a self-compiled locally patched source package, as they’re on 5.4 \r\nalready.\r\n\r\nYour testcase looks sound to exhibit this behaviour on all but the fastest \r\nmachines.\r\n\r\nI have no idea what phpt is, sorry."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 229,
    "fields": {
      "bug": 62106,
      "user": "ab@php.net",
      "content": "Yep, I'd better not start do get all the 5.4 deps on lenny :)\r\n\r\nThe test code should work also on faster mashines. If not - decreasing the last \r\nset_time_limit(3) or increasing the data amount should work. On \r\ncurrent PHP versions a temp file should be laying around anyway after the script \r\nhas \r\nexited with the time limit warning. I mean even the fastest drive cant get 200M \r\nwrote on it in 3 sec ) . But way much better is of course to test \r\nwith your app on a test instance.\r\n\r\nThe patch should apply to 5.3, 5.4 and master as well. \r\n\r\nPHPT are the test case files from the PHP test framework. Such files are usually \r\nto find in \"tests\" subfolders inside the PHP source tree. You can read more \r\nunder"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 230,
    "fields": {
      "bug": 62106,
      "user": "pajoye@php.net",
      "content": "hi!\r\n\r\nThanks for the bug report and patch!\r\n\r\nI do not like the idea of having php specific function called or used like it is \r\nin this patch.\r\n\r\nTemporary files are created while working with a given archive. These files \r\nshould be destroyed when the archive is not used anymore, on resource or object \r\ndestroy.\r\n\r\nMaybe a function in the zip library could be added for this cleanup."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 231,
    "fields": {
      "bug": 62106,
      "user": "ab@php.net",
      "content": "I'll be working on improving libzip then. But I think, testing the current patch \r\nwould make sense anyway. At least it could prove the code path, despite we could \r\npack the improved libzip stuff into a __destruct() or alike."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 232,
    "fields": {
      "bug": 62106,
      "user": "cmb@php.net",
      "content": "> Maybe a function in the zip library could be added for this\r\n> cleanup.\r\n\r\nWouldn't calling zip_discard() be sufficient if zip_close() fails?\r\nCf. <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 233,
    "fields": {
      "bug": 63343,
      "user": "brn at macrovita dot com dot br",
      "content": "Note: This bug is NOT specific to SQLite.\r\n\r\nThe original test case uses SQLite just because it makes it simpler to reproduce the problem.\r\n\r\nOriginally, we ran into this bug with connections against MySQL."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 234,
    "fields": {
      "bug": 63343,
      "user": "cmb@php.net",
      "content": "Confirmed: <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 235,
    "fields": {
      "bug": 63343,
      "user": "cmb@php.net",
      "content": "This is a memory management issue, as setting `$st = null` hints\r\nat. Furthermore, assigning the second `$db->query()` to something\r\nelse than `$st` (e.g. `$st1`) also lets the script succeed.\r\n\r\nThe fix for PHP-7.0+ appears to be trivial (see PR #2112), but I\r\ndon't know how to solve the problem for PHP-5.6."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 236,
    "fields": {
      "bug": 63343,
      "user": "cmb@php.net",
      "content": "Actually, Nikita's analysis[1] is spot on:\r\n\r\n| The problem as I see it is that destruction of one of the PDO\r\n| objects will always rollback the transaction on the inner object\r\n| (if a transaction is active). In this case this backfires because\r\n| in the meantime another transaction has been opened through a\r\n| different PDO object (but same inner object).\r\n\r\nIt seems to me that this very issue is only an edge case of the\r\nmore general issue that connections that are in use also can be\r\nreused (from the same request, but even worse also from other\r\nrequests).  I.e. any global state (change) of the connection\r\n(inner object) can affect other code in unforeseen ways.\r\n\r\n[1] <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 237,
    "fields": {
      "bug": 63343,
      "user": "nikic@php.net",
      "content": "> (from the same request, but even worse also from other requests)\r\n\r\nIs that really the case? IIRC the connection pooling is per process/thread, and there can only be one request per process/thread at a time."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 238,
    "fields": {
      "bug": 63343,
      "user": "cmb@php.net",
      "content": "> IIRC the connection pooling is per process/thread, and there can\r\n> only be one request per process/thread at a time.\r\n\r\nOh, you're right! (otherwise there would be more serious issues)\r\n\r\nStill, I think users are better off to use a single PDO instance\r\nper persistent connection, in which case this issue would not\r\nhappen."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 239,
    "fields": {
      "bug": 63343,
      "user": "nikic@php.net",
      "content": "> Still, I think users are better off to use a single PDO instance\r\n> per persistent connection, in which case this issue would not\r\n> happen.\r\n\r\nYes, I agree. If people want to share a connection, they should use the same object."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 240,
    "fields": {
      "bug": 63380,
      "user": "tstarling@php.net",
      "content": ""
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 241,
    "fields": {
      "bug": 63380,
      "user": "rrichards@php.net",
      "content": "There is a major problem with doing this and why I didn't end tying into the PHP \r\nmemory allocator. Depending upon setup, it is extremely likely to be able to hit \r\nmemory corruption and/or mix memory allocations between modules. i.e. using \r\nmod_perl and mod_php will cause PHP to override the libxml memory handling \r\nfunctions (which are global) and bleed into mod_perl (or any others that are \r\nusing libxml2) causing any number of results (crashes, security issues, etc..). \r\nThe only way to be able to do something like this would be to make it compile \r\ntime option which is disabled by default allowing those who know their \r\nenvironment intimately can utilize this at their own risk, Don't know if you \r\nwant to write a patch for that or not. Otherwise I don't see any way this could \r\nsafely be added,"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 242,
    "fields": {
      "bug": 63380,
      "user": "tstarling@php.net",
      "content": "Do you know of a specific case where request-local allocations could bleed into mod_perl and cause memory corruption?\r\n\r\nI have reviewed all of libxml's global variables and ensured that they cannot be made to hold pointers to request-local allocations. The hooks are disabled at post-deactivate via a thread-local variable, so a perl request will not get request-local pointers from xmlMalloc() whether it runs in its own thread concurrently, or in the same thread as PHP but at a later time. TSRM_FETCH() should give default global variables, with local request allocation disabled, even if it is called from a thread where PHP has never been used.\r\n\r\nEither way, I would be happy to make this configurable, off by default, since the robustness of the solution depends on details of global pointer storage in libxml which may change in the future. So my patch does introduce a maintenance burden, with a risk of dangling pointers if that maintenance is not kept up to date. I'm just not keen on having the documentation say that there are known issues with interaction with other Apache modules unless that is truly the case."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 243,
    "fields": {
      "bug": 63380,
      "user": "pajoye@php.net",
      "content": "That is a very well known issues when mixed builds free and alloc same memory \r\nareas.\r\n\r\nIt is (almost) no problem when using libc allocation system but it is a (huge) \r\nproblem when php uses PHP memory manager and other libc or their own mm. It leads \r\nto crashes, almost always."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 244,
    "fields": {
      "bug": 63380,
      "user": "tstarling@php.net",
      "content": "Unassigning from me since I'm not really interested in pursuing this. I have tried to explain the risks involved, and the precautions I have taken, but the comments I have received, here and on the pull request, indicate that I have not been successful. The feature will require maintenance, and obviously if nobody understands what the patch is doing and why, then nobody will be able to maintain it."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 245,
    "fields": {
      "bug": 63767,
      "user": "pajoye@php.net",
      "content": "Please post it at #36103 only, no need to open a new bug. \r\n\r\n\r\nThanks for your work!"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 246,
    "fields": {
      "bug": 63767,
      "user": "pajoye@php.net",
      "content": "Ok, reopen, a bit bad to have many bugs for the same issue, but Tony likes it ;-)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 247,
    "fields": {
      "bug": 63767,
      "user": "lior dot k at zend dot com",
      "content": "Any news about this ?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 248,
    "fields": {
      "bug": 63767,
      "user": "kalle@php.net",
      "content": "@lior\r\n\r\nAs you got karma yourself, you can go ahead and commit the patch of yours, however like noted:\r\n\r\n- The code do/while code should be refactored into a function as its re-used\r\n- Please add a test to this fix\r\n\r\nMerging this to as low as PHP-7.0 should be perfectly acceptable, thanks!"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 249,
    "fields": {
      "bug": 63941,
      "user": "derick@php.net",
      "content": "What does this patch actually do? There is a lot of weirdness in it, and I thought the performance patch was already committed?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 250,
    "fields": {
      "bug": 63941,
      "user": "njaguar at gmail dot com",
      "content": "This patch is a minor performance increase, as well as code cleanup.\r\n\r\nThis applies changes to no longer require the usage of the int value that was caching whether timezones were previously verified, as well as combining usage into just *timezone instead of using both *timezone and *default_timezone for selecting between runtime and ini values. It also replaces a strlen() check with a ptr deference to speed up validation of *timezone checks (runtime cached timezone value that is verified valid). It significantly simplifies guess_timezone(). I also removed the extraneous DATEG(timezone) = NULL from the default timezone setter function, as immediately following it, it sets to the estrndup() value that the user provided.\r\n\r\nThis concept was suggested by Nuno Lopes and Christopher Jones, whom asked me to write up this patch.\r\n\r\nThanks!"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 251,
    "fields": {
      "bug": 64173,
      "user": "salathe@php.net",
      "content": "I don't see this as a documentation bug.  This filter effectively just calls \r\nparse_url() on the value and looks to see if the resulting array makes some \r\nsense. Running \""
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 252,
    "fields": {
      "bug": 64173,
      "user": "retze dot faber at gmail dot com",
      "content": "Changed to bug, cause I feel it should return false when I call it with"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 253,
    "fields": {
      "bug": 64173,
      "user": "f21 dot groups at gmail dot com",
      "content": "Just ran into this as well. I think there some further checking should be done in filter_var as"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 254,
    "fields": {
      "bug": 64173,
      "user": "cmb@php.net",
      "content": "For reference: <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 255,
    "fields": {
      "bug": 64196,
      "user": "nikic@php.net",
      "content": "zend_object.guards is for property guards. Wouldn't you be clashing with the guard for $__clone here?\r\n\r\nAlso, I'm not convinced we need to add this check at all. Recursion is a valid means of programming and as long as there is some termination condition everything's okay. Arguably with \"clone\" recursion makes rather little sense, but as it stands now we are open to recursion everywhere and I don't think we should go down the patch of saying \"recursion is okay here, but it's not okay here\". I mean, \"include\" for example can also be used recursively, even though you might argue that that's nearly as useless. Should we be adding checks everywhere, where we think recursion makes too little sense? I don't think so.\r\n\r\nThe only (calls) that currently use recursion guarding are __get/__set and friends. For those it makes sense because the recursion guarding gives access to the underlying property, so it has some actual function (rather than just forbidding a programming pattern)."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 256,
    "fields": {
      "bug": 64196,
      "user": "krakjoe@php.net",
      "content": "__clone-2.patch addresses the clash ... and ensures proper functionality in all \r\nsituations, not just basic examples.\r\n\r\nwe don't seem to be able to agree on whether such checks should be made, but at \r\nleast now there are no clashes and the patch is correct ..."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 257,
    "fields": {
      "bug": 64196,
      "user": "nikic@php.net",
      "content": "Not sure in what way the new patch resolves the clash. Doesn't it just move it from \"$foo->__clone\" towards \"$foo->{'$__clone'}\"?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 258,
    "fields": {
      "bug": 64196,
      "user": "requinix@php.net",
      "content": "Still present in 7.2."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 259,
    "fields": {
      "bug": 64196,
      "user": "dams@php.net",
      "content": "Still present in 7.3"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 260,
    "fields": {
      "bug": 64280,
      "user": "laruence@php.net",
      "content": "you can refer to xdebug.max_nesting_level \r\n\r\nanyway, implement such protection needs a lots of work,  yes we can simple add a \r\ncount to zend_call_function,  but there are many implicit function call, like \r\nautoloading, toString etc.\r\n\r\nand for op_array execution, it is executed via zend_execute which is not this \r\n\"function call\"\r\n\r\nso if we add such counter to zend_call_function, many confused question will be \r\ncome."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 261,
    "fields": {
      "bug": 64280,
      "user": "bobwei9 at hotmail dot com",
      "content": "I'd consider creating a int implicit_function_call_count to the EG and incrementing it in zend_call_function (in zend_execute_API.h) (before the next call to f.ex. zend_execute) and then decrement? And check then there for a limit and abort it necessary with an E_ERROR? Should not be loads of code?\r\n\r\nxdebug? Does everything have to be external to the core?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 262,
    "fields": {
      "bug": 64280,
      "user": "laruence@php.net",
      "content": "I doubt whether this is necessary, it's a narrow wrong usage after all."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 263,
    "fields": {
      "bug": 64280,
      "user": "bobwei9 at hotmail dot com",
      "content": "Exactly. But it is a) hard to find out what's going wrong (like a function produces an error which is also called accidentally in the error handler. How to find out the error without analyzing the globals of the core dump?) and b) more user friendly for debugging as you cannot suppose an user knows how to use gdb. I don't see any disadvantages here..."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 264,
    "fields": {
      "bug": 64280,
      "user": "valentiny510 at gmail dot com",
      "content": "Related to this... the same happens when you call self::__construct inside __construct. Test code:\r\n\r\nclass V {\r\n   function __construct( ) {\r\n      self::__construct( );\r\n   }\r\n}\r\nnew V;"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 265,
    "fields": {
      "bug": 64291,
      "user": "Terry at ellisons dot org dot uk",
      "content": "This bug is cascading to another:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 266,
    "fields": {
      "bug": 64291,
      "user": "Terry at ellisons dot org dot uk",
      "content": "Sorry the second line above should read:\r\n\r\n$b = function(){ return \"b\"; };"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 267,
    "fields": {
      "bug": 64291,
      "user": "Terry at ellisons dot org dot uk",
      "content": "The issue here is that the runtime defined function keys should be unique, and the current algo does not generate unique keys.  There are many approaches that could be taken to remove such incorrect name clashes.  The patch that I've submitted add a sequence count to the key -- simple but sufficient to prevent this bug."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 268,
    "fields": {
      "bug": 64291,
      "user": "Terry at ellisons dot org dot uk",
      "content": "Just to note that my patch is not strong enough when used with OPcache, since a simple static running count can fail when the interpreter is forked.  Better alternatives include \r\n\r\n* some form of unique id, e.g. a UUID or uniquid(true)\r\n* a content based hash, such as md5file(__FILE__) -- though if this were to be adopted then it would be better always to generate this as part of the compile creating say __FILE_MD5__, though this would add a few % to the compile time.\r\n\r\nThis all needs wider discussion of these issues on the Internals ML."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 269,
    "fields": {
      "bug": 64291,
      "user": "dmitry@php.net",
      "content": "Your second script prints \"a, a\" only with OPCache, because it caches the included temporary file. Without OPCache it prints the expected \"a, b\".\r\n\r\nI also don't think that the first script indicates a bug. The more functions you create the more memory it requires."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 270,
    "fields": {
      "bug": 64291,
      "user": "Terry at ellisons dot org dot uk",
      "content": "What threw me was the botch with the temporary entries \"\\0{closure}$filenane$offset\" are used in the EG(function_table).  This is as clear as mud.  When a file is compiled, a function table entry is created for each closue in the source.  This entry is never executed directly, but is used by the ZEND_DECLARE_LAMBDA_FUNCTION to construct the closure object which contains a deep copy of this zend_function record.  It is this copy that used when the closure is called.  So long as the ZEND_DECLARE_LAMBDA_FUNCTION\r\nare executed within the same scope as the compile, this should normally be unique, but it is quite easy to construct a test case which the unique assumption fails: \r\n\r\n--TEST--\r\nISSUE #65915 Temporary function entries for closures are not unique\r\n--INI--\r\nopcache.enable=0\r\n--SKIPIF--\r\n--FILE--\r\n<?php\r\n$tmp = tempnam(__DIR__, 'test');\r\nforeach (['a','b'] as $f) {\r\n  file_put_contents($tmp, \"<?php function $f() {return function(){ return '$f'; };}\");\r\n  echo file_get_contents($tmp), \"\\n\";\r\n  require $tmp;\r\n}\r\n$a = a();\r\n$b = b();\r\nprintf( \"%s, %s\\n \", $a(), $b());\r\nunlink($tmp);\r\n?>\r\n--CLEAN--\t\r\n--EXPECT--\r\n<?php function a() {return function(){ return 'a'; };}\r\n<?php function b() {return function(){ return 'b'; };}\r\na, b"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 271,
    "fields": {
      "bug": 64291,
      "user": "Terry at ellisons dot org dot uk",
      "content": "And here's the eval version:\r\n\r\n--TEST--\r\nISSUE #64291 Temporary function entries for closures are not unique\r\n--INI--\r\nopcache.enable=1\r\n--FILE--\r\n<?php\r\nforeach (['a','b'] as $f) {\r\n  $tmp = \"function $f() {return function(){ return '$f'; };}\\n\";\r\n  eval($tmp);\r\n  echo $tmp;\r\n}\r\n$a = a();\r\n$b = b();\r\nprintf( \"%s, %s\\n \", $a(), $b());\r\n?>\r\n--EXPECT--\r\nfunction a() {return function(){ return 'a'; };}\r\nfunction b() {return function(){ return 'b'; };}\r\na, b"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 272,
    "fields": {
      "bug": 64291,
      "user": "Terry at ellisons dot org dot uk",
      "content": "Sorry, the above should read opcache.enable=0 though the failure is the same for opcache enabled and not enabled in the eval case."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 273,
    "fields": {
      "bug": 64291,
      "user": "Terry at ellisons dot org dot uk",
      "content": "Dmitry, \r\n\r\nI have just realised that this \"mangled names should be unique\" issue applied to any runtime bound function or class as the following -- albeit perverse example shows:\r\n\r\n--TEST--\r\nISSUE #65915A Temporary class entries are not unique\r\n--INI--\r\nopcache.enable=0\r\n--SKIPIF--\r\n--FILE--\r\n<?php\r\n$tmp = tempnam(__DIR__, 'test');\r\nforeach (['a','b'] as $f) {\r\n  file_put_contents($tmp, <<<END\r\n<?php \r\n  function $f() {\r\n    class Hello { const WORLD = \"Hello world from $f\\\\n\"; }\r\n  }\r\nEND\r\n);\r\n  require $tmp;\r\n}\r\na();\r\necho Hello::WORLD;\r\nunlink($tmp);\r\n?>\r\n--CLEAN--\t\r\n--EXPECT--\r\nHello world from a\r\n\r\nHere the two functions both compile a class with a mangled name \"\\0$class$filename$string_addr\" which is the same for the a() and b() copies\r\nso b() version overwrites the a() one, and the DECLARE_CLASS opcode in a() incorrecly binds to the wrong class, hence Hello::WORLD incorrectly prints out the \"from b\" version.\r\n\r\nHowever, I suspect in practice that this is unlikely to manifest itself in real word apps."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 274,
    "fields": {
      "bug": 64291,
      "user": "ulrich dot eckhardt at base-42 dot de",
      "content": "I'm getting bitten by this bug, too. My use case is basically that I'm generating and eval()'ing code. Since this is not in a one-shot HTTP server process environment but in a longer running process that caches the generated code for performance reasons, this causes various failures that depend on the order in which requests are made.\r\n\r\nUsing Terry's patch on PHP 5.4.24 on Debian/AMD64 caused the problem to go away, my services now run stable. What's keeping you from applying this patch (apart from the fact that it mixes tabs/spaces)?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 275,
    "fields": {
      "bug": 64346,
      "user": "laruence@php.net",
      "content": "confirm this change. this is due to the 5.4 performance improvement: \"literal \r\ncache\"\r\n\r\n@dmitry, maybe we should not cache the function entry for INIT_NS_FCALL?\r\n\r\nthanks"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 276,
    "fields": {
      "bug": 64346,
      "user": "laruence@php.net",
      "content": "or maybe we should document this behavior, since disable it will bring performance \r\nissue"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 277,
    "fields": {
      "bug": 64346,
      "user": "laruence@php.net",
      "content": "@gen the main brief is, when you first call to \\Foo\\Bar,  the 'time' constant in \r\nthe \\Foo\\Bar function, will bundle to \"time function\", in the first time , it \r\nobviously will be bundled to \\time.\r\n\r\nthen when you sencond call to it. PHP will use that cache instead of look up in \r\nfunction table again for \"time\" function, to increase performance..\r\n\r\nso, if we disable the cache, then performance slowdown...\r\n\r\nwhat do you think?  a workaround is define a Foo\\Bar2, after you eval, you call \r\nto it, then it will bundled to \\Foo\\Time.."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 278,
    "fields": {
      "bug": 64346,
      "user": "gen dot work at gmail dot com",
      "content": "The main issue I see is that is_callabe() is lying. It says that '\\Foo\\bar' is callable, but in fact it's not. So just document this behavior is not enough imo, is_callabe should be tweaked to reflect actual status.\r\n\r\nAnd I don't quite understand suggested workaraund. Could you please give a simple example? In my usecase I try to mock time function to avoid sleep() calls:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 279,
    "fields": {
      "bug": 64346,
      "user": "gen dot work at gmail dot com",
      "content": "'\\Foo\\bar' -> '\\Foo\\time' in my prev comment"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 280,
    "fields": {
      "bug": 64346,
      "user": "dmitry@php.net",
      "content": "I suppose the bug has to be fixed.\r\n\r\nThe problem that the fix will slowdown each call to unqualified function from a namespace :(\r\n\r\nI'm not sure if we like to do it..."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 281,
    "fields": {
      "bug": 64346,
      "user": "Terry at ellisons dot org dot uk",
      "content": "Dmitry,\r\n\r\nI came across this one myself (see"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 282,
    "fields": {
      "bug": 64346,
      "user": "Terry at ellisons dot org dot uk",
      "content": "BTW, the title of this bug is misleading.  It can still occur for *any* INCLUDE_OR_EVAL of a namespaced override of a builtin function, eg.\r\n\r\nnamespace fred;\r\nsome_function_which_executes_builtin();\r\ninclude \"some_include_in_namespace_fred_which overrides_same_builtin();\r\nsome_function_which_executes_builtin();"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 283,
    "fields": {
      "bug": 64346,
      "user": "Terry at ellisons dot org dot uk",
      "content": "Damn, why can't you edit your own comments :-)  The include should read:\r\n\r\ninclude \"some_include_in_namespace_fred_which overrides_same_builtin.php\";\r\n\r\nof course."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 284,
    "fields": {
      "bug": 64346,
      "user": "showerheadsuk at hotmail dot com",
      "content": "The same problem also applies to constants when accessing from a namespaced class - if the first the time the constant is accessed it is defined globally but not in the local namespace, then that global value will be used for all future accesses even if it is later defined in the local namespace.\r\n\r\nSince overriding global functions / constants is mostly used just for testing, could this be added as a php.ini option, like \r\nliteral_cache_disable = 1"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 285,
    "fields": {
      "bug": 64346,
      "user": "shiranai7 at hotmail dot com",
      "content": "Would it also be expensive to invalidate specific (not all) keys in the \"literal cache\" each time a function or a constant is defined?\r\n\r\nI'd avoid a global INI setting if possible."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 286,
    "fields": {
      "bug": 64346,
      "user": "syl dot fabre at gmail dot com",
      "content": "Still present in 7.3.0-beta2:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 287,
    "fields": {
      "bug": 64531,
      "user": "phplists at stanvassilev dot com",
      "content": "I hate when that happens, although I guess I'm clear:\r\n\r\nTypo in Expected Result: \"Fetching should cause duplicate\";\r\nshould be:\"Fetching should NOT cause duplicate\";\r\n\r\nTypo in EXAMPLE2: \"Another used has encountered an issue like\"\r\nshould be: \"Another user has encountered an issue like\""
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 288,
    "fields": {
      "bug": 64531,
      "user": "frozenfire@php.net",
      "content": "The related source is:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 289,
    "fields": {
      "bug": 64531,
      "user": "phplists at stanvassilev dot com",
      "content": "Before people start recommending a documentation \"fix\", be aware that I have two \r\nexamples.\r\n\r\nThe first use case is solved by using exec(). The second is solved by nothing, \r\nthe query is evaluated twice. Those are just two examples demonstrating the same \r\nissue.\r\n\r\nDon't try to fix my examples, try to fix the issue. The culprit seems to be that \r\n_step is executed for the query once on query(), but then it's executed all over \r\nagain on first fetch, starting at row1 again.\r\n\r\nA proposed solution fixing all side effects would be to run step() on query() \r\nand cache the fetched result, then return it on first fetch, then call step() on \r\nsecond fetch etc.:\r\n\r\nquery(...); // call sqlite3_step, save row1\r\nfetchArray(...); // return saved row1\r\nfetchArray(...); // call sqlite3_step, return row2\r\nfetchArray(...); // call sqlite3_step, return row3\r\nfetchArray(...); // call sqlite3_step, return row4\r\n..."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 290,
    "fields": {
      "bug": 64531,
      "user": "phplists at stanvassilev dot com",
      "content": "I've been discussing this in #PHP.PECL, with auroraeos and others and basically \r\nthe problem is caused by the OOP interface in the binding.\r\n\r\nThe binding introduces extra logic so query() in PHP can return a resultset \r\nobject or false etc.\r\n\r\nIn order to know what to return, query() calls sqlite3_step() which fetches the \r\nfirst row of the result.\r\n\r\nSo far so good. Here's the problem:\r\n\r\nThe binding then *resets* the query so the first call to fetchArray() returns \r\nrow1 again. This is not library behavior, it's binding behavior that's \r\nadditional logic.\r\n\r\nThis causes row1 to be computed twice, and queries to run twice etc.\r\n\r\nThe solution for solving this without introducing BC breaks and interface \r\nbreaks, is for the binding to store the row it fetched during query() with the \r\nresultset, as outlined in my previous comment, and return it on first call to \r\nfetchArray, without calling step.\r\n\r\nOn subsequent calls to fetchArray(), step is called to fetch the other rows.\r\n\r\nEither way you look at it, the binding added behavior that isn't in the original \r\nlibrary, and this is causing performance issues and side effects. The \r\nresponsible thing is to keep the PHP OOP interface compatible, but fix the \r\nperformance issues and side effects.\r\n\r\nAnd what I described is how to do it..."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 291,
    "fields": {
      "bug": 64531,
      "user": "yuri dot kanivetsky at gmail dot com",
      "content": "I've run into it trying to do:\r\n\r\n    function sq($query, $params = array()) {\r\n        if ($params) {\r\n            $stmt = sdb()->prepare($query);\r\n            if ( ! $stmt) {\r\n                die(\"sqlite: \" . sdb()->lastErrorMsg());\r\n            }\r\n            foreach ($params as $param) {\r\n                $r = call_user_func_array(array($stmt, 'bindValue'), $param);\r\n                if ( ! $r) {\r\n                    die(\"sqlite: \" . sdb()->lastErrorMsg());\r\n                }\r\n            }\r\n            $res = $stmt->execute();\r\n            if ( ! $res) {\r\n                die(\"sqlite: \" . sdb()->lastErrorMsg());\r\n            }\r\n        } else {\r\n            $res = sdb()->query($query);\r\n            if ( ! $res) {\r\n                die(\"sqlite: \" . sdb()->lastErrorMsg());\r\n            }\r\n        }\r\n        $r = array();\r\n        while ($row = $res->fetchArray(SQLITE3_ASSOC)) {\r\n            $r[] = $row;\r\n        }\r\n        return $r;\r\n    }\r\n\r\nMade it work by wrapping the last part in `if ($res->numColumns()) {`:\r\n\r\n        ...\r\n        }\r\n        if ($res->numColumns()) {\r\n            $r = array();\r\n            while ($row = $res->fetchArray(SQLITE3_ASSOC)) {\r\n                $r[] = $row;\r\n            }\r\n            return $r;\r\n        }\r\n    }"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 292,
    "fields": {
      "bug": 64531,
      "user": "dupa at dupa dot com",
      "content": "Same problem here, duplicate inserts with \"query\" method."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 293,
    "fields": {
      "bug": 64531,
      "user": "cmb@php.net",
      "content": "Confirmed: <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 294,
    "fields": {
      "bug": 64531,
      "user": "thomas dot loch at fusion-core dot net",
      "content": "I've just encountered this issue on Linux and Version 5.6.30 while using a similar generic wrapper around prepare/bind*/execute(). Is there still intent to fix this after five years?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 295,
    "fields": {
      "bug": 64531,
      "user": "cmb@php.net",
      "content": "While the fix for SQLite3::query() is trivial, a general fix for\r\nSQLite3Stmt::execute() is impossible, since it is allowed to\r\n::execute() the same statement multiple times, which might trigger\r\nsqlite3_reset()s at unexpected times (see, for instance,"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 296,
    "fields": {
      "bug": 64531,
      "user": "svnpenn at gmail dot com",
      "content": "I am new to PHP SQLite so at first I was disappointed to find that \"procedural style\" functions were dropped with PHP SQLite3. Compare:\r\n\r\n-"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 297,
    "fields": {
      "bug": 64531,
      "user": "antoni at friki dot cat",
      "content": "Hi,\r\n\r\ntoday I've faced that problem.\r\n\r\nHere my patch:\r\n--- php-7.4.2/ext/sqlite3/sqlite3.c\t2020-01-21 12:35:21.000000000 +0100\r\n+++ php-7.4.2-sqlite3fixed/ext/sqlite3/sqlite3.c\t2020-01-31 22:12:56.599653191 +0100\r\n@@ -612,8 +612,11 @@\r\n \treturn_code = sqlite3_step(result->stmt_obj->stmt);\r\n \r\n \tswitch (return_code) {\r\n-\t\tcase SQLITE_ROW: /* Valid Row */\r\n \t\tcase SQLITE_DONE: /* Valid but no results */\r\n+                {\r\n+\t\t\tresult->complete = 1;\r\n+                }\r\n+\t\tcase SQLITE_ROW: /* Valid Row */\r\n \t\t{\r\n \t\t\tphp_sqlite3_free_list *free_item;\r\n \t\t\tfree_item = emalloc(sizeof(php_sqlite3_free_list));\r\n@@ -624,6 +627,7 @@\r\n \t\t\tbreak;\r\n \t\t}\r\n \t\tdefault:\r\n+\t\t\tresult->complete = 1;\r\n \t\t\tif (!EG(exception)) {\r\n \t\t\t\tphp_sqlite3_error(db_obj, \"Unable to execute statement: %s\", sqlite3_errmsg(db_obj->db));\r\n \t\t\t}\r\n@@ -713,6 +717,9 @@\r\n \treturn_code = sqlite3_step(stmt);\r\n \r\n \tswitch (return_code) {\r\n+\t        php_sqlite3_result *result_obj;\r\n+\t        zval *object = ZEND_THIS;\r\n+\t        result_obj = Z_SQLITE3_RESULT_P(object);\r\n \t\tcase SQLITE_ROW: /* Valid Row */\r\n \t\t{\r\n \t\t\tif (!entire_row) {\r\n@@ -730,6 +737,8 @@\r\n \t\t}\r\n \t\tcase SQLITE_DONE: /* Valid but no results */\r\n \t\t{\r\n+\t\t\tresult_obj->complete = 1;\r\n+\r\n \t\t\tif (!entire_row) {\r\n \t\t\t\tRETVAL_NULL();\r\n \t\t\t} else {\r\n@@ -738,10 +747,12 @@\r\n \t\t\tbreak;\r\n \t\t}\r\n \t\tdefault:\r\n-\t\tif (!EG(exception)) {\r\n-\t\t\tphp_sqlite3_error(db_obj, \"Unable to execute statement: %s\", sqlite3_errmsg(db_obj->db));\r\n-\t\t}\r\n-\t\tRETVAL_FALSE;\r\n+\t\t        result_obj->complete = 1;\r\n+\r\n+\t\t        if (!EG(exception)) {\r\n+\t\t        \tphp_sqlite3_error(db_obj, \"Unable to execute statement: %s\", sqlite3_errmsg(db_obj->db));\r\n+\t\t        }\r\n+\t\t        RETVAL_FALSE;\r\n \t}\r\n \tsqlite3_finalize(stmt);\r\n }\r\n@@ -1844,14 +1855,16 @@\r\n \r\n \treturn_code = sqlite3_step(stmt_obj->stmt);\r\n \r\n+\tsqlite3_reset(stmt_obj->stmt);\r\n+\tobject_init_ex(return_value, php_sqlite3_result_entry);\r\n+\tresult = Z_SQLITE3_RESULT_P(return_value);\r\n \tswitch (return_code) {\r\n-\t\tcase SQLITE_ROW: /* Valid Row */\r\n \t\tcase SQLITE_DONE: /* Valid but no results */\r\n+                {\r\n+\t\t\tresult->complete = 1;\r\n+                }\r\n+\t\tcase SQLITE_ROW: /* Valid Row */\r\n \t\t{\r\n-\t\t\tsqlite3_reset(stmt_obj->stmt);\r\n-\t\t\tobject_init_ex(return_value, php_sqlite3_result_entry);\r\n-\t\t\tresult = Z_SQLITE3_RESULT_P(return_value);\r\n-\r\n \t\t\tresult->is_prepared_statement = 1;\r\n \t\t\tresult->db_obj = stmt_obj->db_obj;\r\n \t\t\tresult->stmt_obj = stmt_obj;\r\n@@ -1861,9 +1874,11 @@\r\n \t\t\tbreak;\r\n \t\t}\r\n \t\tcase SQLITE_ERROR:\r\n+\t\t\tresult->complete = 1;\r\n \t\t\tsqlite3_reset(stmt_obj->stmt);\r\n \r\n \t\tdefault:\r\n+\t\t\tresult->complete = 1;\r\n \t\t\tif (!EG(exception)) {\r\n \t\t\t\tphp_sqlite3_error(stmt_obj->db_obj, \"Unable to execute statement: %s\", sqlite3_errmsg(sqlite3_db_handle(stmt_obj->stmt)));\r\n \t\t\t}\r\n@@ -1939,6 +1954,10 @@\r\n \t\treturn;\r\n \t}\r\n \r\n+\tif (result_obj->complete) {\r\n+\t\tRETURN_FALSE;\r\n+\t}\r\n+\r\n \tRETURN_LONG(sqlite3_column_count(result_obj->stmt_obj->stmt));\r\n }\r\n /* }}} */\r\n@@ -1958,6 +1977,11 @@\r\n \tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"l\", &column) == FAILURE) {\r\n \t\treturn;\r\n \t}\r\n+\r\n+\tif (result_obj->complete) {\r\n+\t\tRETURN_FALSE;\r\n+\t}\r\n+\r\n \tcolumn_name = (char*) sqlite3_column_name(result_obj->stmt_obj->stmt, column);\r\n \r\n \tif (column_name == NULL) {\r\n@@ -2007,6 +2031,10 @@\r\n \t\treturn;\r\n \t}\r\n \r\n+        if (result_obj->complete==1) {\r\n+\t\treturn;\r\n+        }\r\n+\r\n \tret = sqlite3_step(result_obj->stmt_obj->stmt);\r\n \tswitch (ret) {\r\n \t\tcase SQLITE_ROW:\r\n@@ -2043,6 +2071,7 @@\r\n \t\t\tbreak;\r\n \r\n \t\tdefault:\r\n+\t\t\tresult_obj->complete = 1;\r\n \t\t\tphp_sqlite3_error(result_obj->db_obj, \"Unable to execute statement: %s\", sqlite3_errmsg(sqlite3_db_handle(result_obj->stmt_obj->stmt)));\r\n \t}\r\n }"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 298,
    "fields": {
      "bug": 64531,
      "user": "antoni at friki dot cat",
      "content": "Here an PHP example reproducing the weird issue.\r\n\r\nFind some commented out alternatives to avoid problems with current php-sqlite3 implementation:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 299,
    "fields": {
      "bug": 64531,
      "user": "antoni at friki dot cat",
      "content": "I think that small patch should fix most problems on fetchArray() usage.\r\nIt's not a breaking change as no one expects re-run insert/update/create statements using a function to acquire a row of data. IMAO\r\n\r\n--- php-7.4.2/ext/sqlite3/sqlite3.c\t2020-01-21 12:35:21.000000000 +0100\r\n+++ php-7.4.2-sqlite3fixed2/ext/sqlite3/sqlite3.c\t2020-01-31 23:37:17.449123405 +0100\r\n@@ -2007,6 +2007,10 @@ PHP_METHOD(sqlite3result, fetchArray)\r\n \t\treturn;\r\n \t}\r\n \r\n+\tif (sqlite3_column_count(result_obj->stmt_obj->stmt) == 0) {\r\n+                return;\r\n+        }\r\n+\r\n \tret = sqlite3_step(result_obj->stmt_obj->stmt);\r\n \tswitch (ret) {\r\n \t\tcase SQLITE_ROW:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 300,
    "fields": {
      "bug": 65069,
      "user": "ab@php.net",
      "content": "Thank you for this bug report. To properly diagnose the problem, we\nneed a short but complete example script to be able to reproduce\nthis bug ourselves. \n\nA proper reproducing script starts with <?php and ends with ?>,\nis max. 10-20 lines long and does not require any external \nresources such as databases, etc. If the script requires a \ndatabase to demonstrate the issue, please make sure it creates \nall necessary tables, stored procedures etc.\n\nPlease avoid embedding huge scripts into the report.\n\nTried your snippet on CLI, but there's no behaviour you describe. I see a proper listing in both \r\ncases. There must be something else causing this."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 301,
    "fields": {
      "bug": 65069,
      "user": "jamie at media32 dot ca",
      "content": "I think I can reproduce this. It only happens when the GlobIterator is used \r\ninside the destructor, and the script is run using Apache/Mod PHP (running via \r\nCLI returns the correct results).\r\n\r\n<?php\r\nerror_reporting(-1);\r\nini_set('display_errors', 1);\r\nini_set('open_basedir', __DIR__);\r\n\r\nclass Globber\r\n{\r\n\tpublic function __destruct()\r\n\t{\r\n\t\tvar_dump(__DIR__);\r\n\t\tvar_dump(glob(__DIR__ . '/*.php'));\r\n\t\tvar_dump(iterator_to_array(new \\GlobIterator(__DIR__ \r\n.'/*.php')));\r\n\t}\r\n}\r\n\r\n$globber = new Globber;\r\n?>\r\n\r\nWhen running via Apache/Mod PHP an UnexpectedValueException is thrown."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 302,
    "fields": {
      "bug": 65069,
      "user": "seld@php.net",
      "content": "On CLI I also get the same problem, Win7 x64 + PHP 5.5.0RC3 or 5.4.3. \r\n\r\nWith PHP 5.3.5 and 5.4.6 on linux it works fine though. Seems it might be windows specific. Although as Jamie says it can maybe be triggered in other ways than using windows."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 303,
    "fields": {
      "bug": 65069,
      "user": "jamie at media32 dot ca",
      "content": "I forgot to mention in my previous comment that I'm running PHP 5.4.14 on OSX \r\nLion."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 304,
    "fields": {
      "bug": 65069,
      "user": "ab@php.net",
      "content": "Ok, inside destructor it reproducible for me on windows CLI, that's already \r\nsomething one can debug :) But the original snippet still doesn't fail that way. \r\nAnd trying DirectoryIterator at that play it works ... so most likely GlobIterator \r\nis broken somehow."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 305,
    "fields": {
      "bug": 65069,
      "user": "ab@php.net",
      "content": "Ok, the issue is much more complicated than it looks. This is a very tricky case \r\nbecause the glob pattern check against the open_basedir value obviously makes no \r\nsense. The implementation of the glob function is simply to\r\n\r\n- expand the pattern\r\n- iterate checking for basedir restriction on every item\r\n- discard result and return false if one of them was not within basedir\r\n\r\n\r\nWhat's going on in GlobIterator is to check the basedir against the pattern in \r\n__construct, that obviously will never work properly. Also, glob extends \r\nFilesystem iterator, only __construct() and count() methods are implemented. \r\n\r\nTwo solutions come in my mind:\r\n\r\n- do the same teh glob() function does, do the work in construct and throw \r\nexception if one of the paths isn't allowed (but that means doing the work \r\ntwice), so no go\r\n- impement the necessary methods in GlobIterator, like current(), next(), etc. \r\n.. this seems more plausible, however the situation where a value isn't within \r\nbasedir, what would for instance current() return? false? ... \r\n\r\nLooks like a big behavior change anyway. Any ideas for a better fix?\r\n\r\nThanks"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 306,
    "fields": {
      "bug": 65069,
      "user": "ab@php.net",
      "content": "Ah, just to mention, GlobIterator is the same as DirectoryIterator('glob://....') \r\n... so that on is broken too."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 307,
    "fields": {
      "bug": 65154,
      "user": "felipe@php.net",
      "content": "Feel free to attach your patch to the report.\r\n\r\nThanks."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 308,
    "fields": {
      "bug": 65154,
      "user": "bholbrook at bomgar dot com",
      "content": "Sorry for my late response :)\r\n\r\nHere is the patch I am using against the current master."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 309,
    "fields": {
      "bug": 65398,
      "user": "mnikulin at plesk dot com",
      "content": "I have tried the patch"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 310,
    "fields": {
      "bug": 65600,
      "user": "requinix@php.net",
      "content": "Using the READ_AHEAD flag will enable the behavior you're expecting. I don't know \r\nif that requirement is intentional or necessary."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 311,
    "fields": {
      "bug": 65600,
      "user": "kentaro at ranvis dot com",
      "content": "Thank you. It worked as expected with setFlags(SplFileObject::READ_AHEAD) before rewind().\r\nI'll wait for further comment to see if this is a requirement (it seems to be.)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 312,
    "fields": {
      "bug": 65600,
      "user": "cmb@php.net",
      "content": "Consider:\r\n\r\n    <?php\r\n    $f = new SplFileObject('php://temp', 'w+');\r\n    $f->fwrite(\"line 1\\nline 2\\nline 3\");\r\n    $f->rewind();\r\n    $f->next();\r\n    $f->next();\r\n    $f->next();\r\n    var_dump($f->key());\r\n    var_dump($f->current());\r\n\r\nWhile key() says we're at line 3, current() returns the first\r\nline. That doesn't make sense; either key() should return 1, or\r\ncurrent() should return the third line."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 313,
    "fields": {
      "bug": 65600,
      "user": "cmb@php.net",
      "content": "Forgot: see <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 314,
    "fields": {
      "bug": 66013,
      "user": "sixd@php.net",
      "content": "It would be helpful to list the 'configure' options and build environment (compilers etc)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 315,
    "fields": {
      "bug": 66013,
      "user": "Pete_Wall at symantec dot com",
      "content": "Both Solaris 10 x86 and Sparc:\r\nCPPFLAGS=\" -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\"\r\n\r\n./configure --disable-cgi --enable-cli --prefix=\"/path/to/php\"\r\n    --with-libxml-dir=\"/path/to/libxml\" --with-openssl=shared,\"/path/to/openssl\"\r\n    --with-zlib=\"/path/to/zlib\" --with-curl=shared,\"/path/to/curl\"\r\n    --with-config-file-path=/path/to/cfgfile --with-layout=GNU\r\n    --with-regex=php --with-tsrm-pthreads --disable-rpath --disable-sysvsem --disable-sysvshm\r\n    --disable-sysvmsg --disable-bcmath --disable-ctype --disable-exif --disable-spl --disable-ftp\r\n    --disable-shmop --enable-tokenizer --disable-static --enable-posix=shared --enable-session=shared\r\n    --enable-sockets=shared --enable-xml=shared --enable-pcntl=shared --enable-dom --without-mm\r\n    --without-gettext --without-iconv --without-sqlite --without-mime-magic --without-mysql --without-sybase-ct\r\n    --without-gdbm --without-db4 --without-cdb --without-pear --without-xsl --disable-debug\r\n    --with-pcre-dir=\"/path/to/pcre\" --with-pcre-regex\r\n\r\n\r\nSolaris 10 x86:\r\nCFLAGS=\" -m64\"\r\n$ gcc -v\r\nReading specs from /usr/sfw/lib/gcc/i386-pc-solaris2.10/3.4.3/specs\r\nConfigured with: /builds/sfw10-gate/usr/src/cmd/gcc/gcc-3.4.3/configure --prefix=/usr/sfw --with-as=/usr/sfw/bin/gas --with-gnu-as --with-ld=/usr/ccs/bin/ld --without-gnu-ld --enable-languages=c,c++ --enable-shared\r\nThread model: posix\r\ngcc version 3.4.3 (csl-sol210-3_4-branch+sol_rpath)\r\n\r\n\r\nSolaris 10 Sparc:\r\nCFLAGS=\"\"\r\n$ gcc -v\r\nReading specs from /usr/local/lib/gcc/sparc-sun-solaris2.10/3.4.6/specs\r\nConfigured with: ../configure --with-as=/usr/ccs/bin/as --with-ld=/usr/ccs/bin/ld --enable-shared --enable-languages=c,c++,f77\r\nThread model: posix\r\ngcc version 3.4.6"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 316,
    "fields": {
      "bug": 66013,
      "user": "phperror at kim dot net",
      "content": "This error occurs when compiling php 5.5.5 on Omnios which is\r\na continuation of OpenSolaris."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 317,
    "fields": {
      "bug": 66013,
      "user": "rob dot de dot langhe at twistfare dot be",
      "content": "And it also happens on (true) Solaris-10 compiling PHP 5.5.6 on SPARC :\r\n\r\n/bin/bash /our_base_dir/src/php-5.5.6/libtool --silent --preserve-dup-deps --mode=compile /our_base_dir/bin/gcc  -Iext/sockets/ -I/our_base_dir/src/php-5.5.6/ext/sockets/ -DPHP_ATOM_INC -I/our_base_dir/src/php-5.5.6/include -I/our_base_dir/src/php-5.5.6/main -I/our_base_dir/src/php-5.5.6 -I/our_base_dir/src/php-5.5.6/ext/date/lib -I/our_base_dir/src/php-5.5.6/ext/ereg/regex -I/usr/include/libxml2 -I/our_base_dir/include -I/our_base_dir/src/php-5.5.6/ext/sqlite3/libsqlite -I/our_base_dir/src/php-5.5.6/TSRM -I/our_base_dir/src/php-5.5.6/Zend  -D_POSIX_PTHREAD_SEMANTICS -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT  -m32 -I/our_base_dir/include -fvisibility=hidden -DZTS  -c /our_base_dir/src/php-5.5.6/ext/sockets/sockaddr_conv.c -o ext/sockets/sockaddr_conv.lo\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c: In function 'from_zval_write_control_array':\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c:973:8: error: 'struct msghdr' has no member named 'msg_control'\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c:974:8: error: 'struct msghdr' has no member named 'msg_controllen'\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c: In function 'to_zval_read_control_array':\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c:1037:12: warning: assignment makes pointer from integer without a cast [enabled by default]\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c:1039:9: warning: assignment makes pointer from integer without a cast [enabled by default]\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c: In function 'from_zval_write_controllen':\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c:1146:8: error: 'struct msghdr' has no member named 'msg_control'\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c:1147:8: error: 'struct msghdr' has no member named 'msg_controllen'\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c: In function 'to_zval_read_msghdr':\r\n/our_base_dir/src/php-5.5.6/ext/sockets/conversions.c:1248:34: error: 'struct msghdr' has no member named 'msg_flags'\r\n\r\nThe flags used :\r\n./configure --with-apxs2=/our_base_dir/bin/apxs --with-config-file-path=/our_base_dir/etc --prefix=/our_base_dir --with-gd=/our_base_dir --with-png-dir=/our_base_dir --with-xpm-dir=no --disable-phar --enable-sockets --with-zlib --without-pear --without-iconv"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 318,
    "fields": {
      "bug": 66013,
      "user": "meths at btinternet dot com",
      "content": "Still happens with 5.5.7 on SmartOS so is probably affecting all illumos and Solaris based systems.\r\n\r\nAlso duplicate of"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 319,
    "fields": {
      "bug": 66013,
      "user": "christian dot lachner at gmail dot com",
      "content": "On Solaris 5.11, the problem's source is in /usr/include/sys/socket.h where the struct 'msghdr' is declared. The missing two elements '*msg_control' and 'msg_controllen' are IFDEFed out and can only be enabled by setting __lint, _XPG4_2 or _KERNEL. However, neither of these three values is set by the configure-script.\r\n\r\nAs a result, using export EXTRA_CFLAGS=\"-D__lint\" makes socket.so as well as the rest of php build fine. Don't use EXTRA_CFLAGS=\"-D_XPG4_2\" as it probably breaks other stuff.\r\n\r\nDunno about older Solaris releases though."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 320,
    "fields": {
      "bug": 66013,
      "user": "rainer dot jung at kippdata dot de",
      "content": "My workaround is adding\r\n\r\n#define _XOPEN_SOURCE 500\r\n#define _XOPEN_SOURCE_EXTENDED 1\r\n#define __EXTENSIONS__\r\n\r\nat the top of the files ext/sockets/conversions.c and ext/sockets/sendrecvmsg.c."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 321,
    "fields": {
      "bug": 66013,
      "user": "alp at rsu dot ru",
      "content": "One more workaround, which we use in OpenIndiana /hipster:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 322,
    "fields": {
      "bug": 66013,
      "user": "g dot fischer at ah-consulting dot net",
      "content": "this is still present in 5.6.11, solaris 11.2, sunpro 5.12.\r\n5.3.x and 5.4.x are fine so it seems it was re-introduced in 5.5.x.\r\nalso see"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 323,
    "fields": {
      "bug": 66013,
      "user": "eugene at zhegan dot in",
      "content": "Still there in 5.6.21 / Solaris 11.2."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 324,
    "fields": {
      "bug": 66013,
      "user": "norm dot jacobs at oracle dot com",
      "content": "FWIW, _XPG4_2 is an internal implementation detail in Solaris and should not be used directly, instead defining _XOPEN_SOURCE >=500 is a possible option.  See the standards(5) man page and/or sys/feature_tests.h on Solaris for more detail."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 325,
    "fields": {
      "bug": 66013,
      "user": "cmb@php.net",
      "content": "Active support for PHP 5 has ended quite a while ago. Does this issue persist\r\nwith current PHP 7 versions?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 326,
    "fields": {
      "bug": 66013,
      "user": "g dot fischer at ah-consulting dot net",
      "content": "yes, it still happens with php 7."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 327,
    "fields": {
      "bug": 66013,
      "user": "glen dot r dot kriekenbeck at kp dot org",
      "content": "On Solaris 10, using the OpenCSW gcc 4.9.0 toolchain and prerequisite open source libraries, I successfully compiled ext/sockets/conversions.c and ext/sockets/sendrecvmsg.c by prepending:\r\n\r\n#define _XOPEN_SOURCE 600\r\n#define __EXTENSIONS__\r\n\r\nto the top of each file."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 328,
    "fields": {
      "bug": 66013,
      "user": "glen dot r dot kriekenbeck at kp dot org",
      "content": "I'm sorry, missed some important details:\r\n\r\nVersion: php-7.3.25\r\nEnv: \r\nPATH=/opt/csw/bin:/usr/bin:/bin\r\nCC=\"/opt/csw/bin/gcc\"\r\nCFLAGS=\"-std=gnu99 -fPIC -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\"\r\nLDFLAGS=\"-L/opt/csw/lib -R/opt/csw/lib\"\r\nMAKE=\"/opt/csw/bin/gmake\"\r\nSED=\"/opt/csw/bin/gsed\"\r\n\r\nConfiguration:\r\n./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/lib --with-apxs2=/opt/csw/bin/apxs --with-ldap=/opt/csw \\\r\n --with-openssl=/opt/csw --with-openssl-dir=/opt/csw/ \\\r\n --with-mysqli --with-pdo-mysql --with-pdo-mysql  --with-zlib --with-zlib-dir=/opt/csw --with-libzip=/opt/csw \\\r\n --with-iconv-dir=/opt/csw --with-pcre-dir=/opt/csw --with-libxml-dir=/opt/csw --with-curl=/opt/csw --with-openssl \\\r\n --with-webp-dir=/opt/csw --with-jpeg-dir=/opt/csw --with-xpm-dir=/opt/csw \\\r\n --with-openssl-dir=/opt/csw/lib/ --with-gd --with-freetype-dir=/opt/csw --with-gnu-ld --enable-shared --enable-mbstring \\\r\n --enable-exif --enable-sockets --enable-soap --enable-zip  --enable-ftp --enable-mysqlnd --disable-zend-signals --disable-static"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 329,
    "fields": {
      "bug": 66019,
      "user": "cmb@php.net",
      "content": "Confirmed: <"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 330,
    "fields": {
      "bug": 66019,
      "user": "derick@php.net",
      "content": "@cmb, your patch breaks:\r\n\r\nderick@gargleblaster:~/dev/derickr-timelib$ ./tests/tester-parse-string \"14/10/2006\"\r\nE=2 TS: 0 | -99999-10-20 14:00:00\r\nErrors found while parsing '14/10/2006'\r\nE Unexpected character @ pos 2 (char=[/])\r\nE Double time specification @ pos 8 (char=[0])\r\n\r\nderick@gargleblaster:~/dev/derickr-timelib$ ./tests/tester-parse-string \"13/10/2006\"\r\nE=2 TS: 0 | -99999-10-20 13:00:00\r\nErrors found while parsing '13/10/2006'\r\nE Unexpected character @ pos 2 (char=[/])\r\nE Double time specification @ pos 8 (char=[0])\r\n\r\nSo unless you're really invested in this, I'm likely to close this."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 331,
    "fields": {
      "bug": 66019,
      "user": "cmb@php.net",
      "content": "Ah, yes, this patch is way to general; it doesn't make sense to\r\nsupport stand alone hours.  Still, I think the date parser should\r\nsupport ISO 8061 YYYY-MM-DDTHH.  I submitted a draft PR:\r\n<"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 332,
    "fields": {
      "bug": 66095,
      "user": "devurandom at gmx dot net",
      "content": "I can reproduce this using PHP 5.5.9 on Apache 2.4.7.\r\n\r\nSee-Also:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 333,
    "fields": {
      "bug": 66095,
      "user": "devurandom at gmx dot net",
      "content": "See-Also:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 334,
    "fields": {
      "bug": 66095,
      "user": "rossi dot f at inwind dot it",
      "content": "First of all I'm experiencing the same problem with my system, I'm using PHP 5.5.20 and apache 2.2.27 with an external libmagic (version 5.21). Up to now the only way to survive has been to keep the system libmagic at version 5.11 but this has implications on the secuiry!\r\n\r\nIs there any PHP developer thinking about how to solve this issue?\r\n\r\nI have tried to apply the patch here proposed but it doesn't seem to work because I get errors when compiling the code, see the attached log."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 335,
    "fields": {
      "bug": 66095,
      "user": "rossi dot f at inwind dot it",
      "content": "I cannot find a way to upload the full log, here is a short piece:\r\n\r\next/fileinfo/libmagic/.libs/apprentice.o:(.rodata+0x0): multiple definition of `php_magic_database'\r\next/fileinfo/.libs/fileinfo.o:(.rodata+0xe00): first defined here\r\next/fileinfo/libmagic/.libs/apprentice.o:(.rodata+0x27c590): multiple definition of `file_nnames'\r\next/fileinfo/.libs/fileinfo.o:(.rodata+0x27d390): first defined here\r\next/fileinfo/libmagic/.libs/apprentice.o:(.rodata+0x27c598): multiple definition of `file_nformats'\r\next/fileinfo/.libs/fileinfo.o:(.rodata+0x27d398): first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_tole2':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:159: multiple definition of `cdf_tole2'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:159: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_tole4':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:165: multiple definition of `cdf_tole4'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:165: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_tole8':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:171: multiple definition of `cdf_tole8'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:171: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_swap_header':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:179: multiple definition of `cdf_swap_header'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:179: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `memcpy':\r\n/usr/include/bits/string3.h:51: multiple definition of `cdf_unpack_header'\r\next/fileinfo/.libs/fileinfo.o:/usr/include/bits/string3.h:51: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_swap_dir':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:232: multiple definition of `cdf_swap_dir'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:232: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_swap_class':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:248: multiple definition of `cdf_swap_class'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:248: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `memcpy':\r\n/usr/include/bits/string3.h:51: multiple definition of `cdf_unpack_dir'\r\next/fileinfo/.libs/fileinfo.o:/usr/include/bits/string3.h:51: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_header':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:322: multiple definition of `cdf_read_header'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:322: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_sector':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:356: multiple definition of `cdf_read_sector'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:356: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_short_sector':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:366: multiple definition of `cdf_read_short_sector'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:366: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_sat':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:386: multiple definition of `cdf_read_sat'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:386: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_count_chain':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:473: multiple definition of `cdf_count_chain'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:473: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_long_sector_chain':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:498: multiple definition of `cdf_read_long_sector_chain'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:498: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_short_sector_chain':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:545: multiple definition of `cdf_read_short_sector_chain'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:545: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_sector_chain':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:587: multiple definition of `cdf_read_sector_chain'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:587: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_dir':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:599: multiple definition of `cdf_read_dir'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:599: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_ssat':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:653: multiple definition of `cdf_read_ssat'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:653: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_short_stream':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:699: multiple definition of `cdf_read_short_stream'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:699: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_summary_info':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:734: multiple definition of `cdf_read_summary_info'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:734: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_read_property_info':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:758: multiple definition of `cdf_read_property_info'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:758: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_unpack_summary_info':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:957: multiple definition of `cdf_unpack_summary_info'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:957: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_print_classid':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:987: multiple definition of `cdf_print_classid'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:987: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_print_property_name':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:1023: multiple definition of `cdf_print_property_name'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:1023: first defined here\r\next/fileinfo/libmagic/.libs/cdf.o: In function `cdf_print_elapsed_time':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:1034: multiple definition of `cdf_print_elapsed_time'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf.c:1034: first defined here\r\next/fileinfo/libmagic/.libs/cdf_time.o: In function `cdf_timestamp_to_timespec':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf_time.c:109: multiple definition of `cdf_timestamp_to_timespec'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf_time.c:109: first defined here\r\next/fileinfo/libmagic/.libs/cdf_time.o: In function `cdf_timespec_to_timestamp':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf_time.c:167: multiple definition of `cdf_timespec_to_timestamp'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf_time.c:167: first defined here\r\next/fileinfo/libmagic/.libs/cdf_time.o: In function `cdf_ctime':\r\n/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf_time.c:171: multiple definition of `cdf_ctime'\r\next/fileinfo/.libs/fileinfo.o:/var/tmp/portage/dev-lang/php-5.5.20/work/sapis-build/cli/ext/fileinfo/libmagic/cdf_time.c:171: first defined here\r\ncollect2: error: ld returned 1 exit status\r\nMakefile:266: recipe for target 'sapi/cli/php' failed\r\nmake: *** [sapi/cli/php] Error 1"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 336,
    "fields": {
      "bug": 66095,
      "user": "info at rickvanderzwet dot nl",
      "content": "Still relevant at FreeBSD 11.3-RELEASE. \r\n\r\nSoftware versions:\r\n  - www/mod_dav_svn 1.12.2\r\n  - sysutils/php72-fileinfo 7.2.22\r\n  - www/apache24 - 2.4.41\r\n\r\n\r\nSimple test case:\r\nshell# echo \"This is a dummy file\" > /tmp/foo.txt\r\n\r\nRunning code served by apache:\r\n<?php\r\n  $fi = finfo_open(FILEINFO_MIME);\r\n  echo finfo_file($fi, '/tmp/foo.txt');\r\nphp>\r\n\r\nRunning the code with mod_dav_svn enabled will cause the execution to fail. Disabling mod_dav_svn will execute correctly. Rationale also explained in FreeBSD PR report:"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 337,
    "fields": {
      "bug": 66486,
      "user": "thiago at carvalho dot fm",
      "content": "Pull request"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 338,
    "fields": {
      "bug": 66486,
      "user": "derick@php.net",
      "content": "hmm, don't see much of a problem with this ... I would not classify this as a bug that needs fixing."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 339,
    "fields": {
      "bug": 66694,
      "user": "d dot v dot taylor at leedsmet dot ac dot uk",
      "content": "I've hit this too on 5.5.11, but with a Bus Error rather than a SEGV (which will be a SPARC vs x86 thing). It particularly happens if I kill -QUIT FPM before it's handled *any* requests (and so hasn't received any events). This is the backtrace (using mdb):\r\n\r\nfpm_event_fire+0x1c(2e70687035002e, ffffffff, 1, ffffffff7fffd470, ffffffff7fffd460, ffffffffffffffff)\r\nfpm_event_port_wait+0x1ec(1014a3c50, 3e8, 2, 100efe858, 1768, 0)\r\nfpm_event_loop+0x3f0(0, 0, 0, 0, 0, 0)\r\nfpm_run+0xa8(ffffffff7ffff928, 0, a, 100effc80, ffffffff7df02a40, ffffffff7df02a40)\r\nmain+0x12bc(1, ffffffffffffffff, ffffffff7ffffaa8, ffffffff7df001c0, 2880, 2800)\r\n_start+0x12c(0, 0, 0, 0, 0, 0)\r\n\r\n\r\n\r\nThis is what I think is going on in my case (maybe yours too?) - long story short it's a memory reuse problem:\r\n\r\nfpm_event_port_init() malloc()s a chunk of memory to store events retrieved from the port, and doesn't initialise that memory at all. In my case it happened to have previously stored a pointer to a string used in processing php-fpm.conf.\r\n\r\nfpm_event_port_wait() uses port_getn() to look for events, with a parameter nget  - the intended number of events - set to 1. In normal use that nget parameter is updated to the number of events actually retrieved, but if port_getn is interrupted by a signal and no events have been sent to the port, nget is left at 1 (see"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 340,
    "fields": {
      "bug": 66694,
      "user": "christian at kuehnke dot de",
      "content": "I experienced this problem (php-fpm SIGSEGVs after sending it SIGQUIT immediately after startup) with php 7.0.12 and 5.6.27 on Solaris 11.3.\r\n\r\nI attached a one-liner patch for this problem. It is still not well tested, will update here later..."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 341,
    "fields": {
      "bug": 66694,
      "user": "stadtkind2 at gmx dot de",
      "content": "I have the same problem with PHP 7.1.2 on Solaris 11.3/SPARC. The applied patch did not fix it, I'm still getting coredumps:\r\n\r\n# pstack /var/cores/core.php-fpm.0.15837\r\ncore '/var/cores/core.php-fpm.0.15837' of 15837:        /opt/php7/sbin/php-fpm\r\n 0000000100caa288 fpm_event_fire (0, 0, 1, 20000, 0, 101076720) + 8\r\n 0000000100caa0ac fpm_event_loop (0, 0, ffffffff7ffff550, 100de4880, 10059c5c8, fffffffffff0bdc0) + 2fc\r\n 0000000100ca0024 fpm_run (ffffffff7ffffa24, bd350, 0, bd000, 6, ffffffff7f782a40) + 64\r\n 0000000100cb22cc main (7b9400, ffffffffff7d8674, 827800, 0, 100dc3fb0, ffffffffff846a18) + eec\r\n 000000010060dee8 _start (0, 0, 0, 0, 0, 100dc3fb0) + 108"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 342,
    "fields": {
      "bug": 66694,
      "user": "stadtkind2 at gmx dot de",
      "content": "The 03-event_port.patch patch at"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 343,
    "fields": {
      "bug": 67292,
      "user": "ghpille at hotmail dot com",
      "content": "When php_stream_eof is checked, after the server sent its FIN packet, it returns false when it should be true.\r\n\r\nThis is caused by stream->eof being false OR php_stream_set_option not returning PHP_STREAM_OPTION_RETURN_ERR when it should\r\n\r\n        if (!stream->eof && PHP_STREAM_OPTION_RETURN_ERR ==\r\n                        php_stream_set_option(stream, PHP_STREAM_OPTION_CHECK_LIVENESS,\r\n                        0, NULL)) {\r\n                stream->eof = 1;\r\n        }\r\n        return stream->eof;"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 344,
    "fields": {
      "bug": 67292,
      "user": "ghpille at hotmail dot com",
      "content": "Exact error message is:\r\n\r\nFatal error: Uncaught SoapFault Exception [HTTP] error fetching http headers"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 345,
    "fields": {
      "bug": 67351,
      "user": "cmb@php.net",
      "content": "I agree that the current handling of 304 Not Modified doesn't make\r\nmuch sense, but I wonder how that should be handled.  Just do\r\nnothing, but return true?  And how to handle file_get_contents()\r\netc.?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 346,
    "fields": {
      "bug": 67351,
      "user": "Andy_Schmidt at HM-Software dot com",
      "content": "Sorry - I thought I had already posted this:\r\n\r\nExpected result:\r\n----------------\r\nWhen a HTTP 304 response is returned, the copy() function must NOT touch the target file. \r\nSuggestion: copy() could return a FALSE (indicating that nothing was copied), in case the script wishes to check the HTTP response to decide on any specialized processing, if any.\r\n\r\n\r\nAs far as your follow-up question regarding file_get_contents(): The HTTP 304 response can only possibly occur because the caller had explicitly/intentionally produced an \"If-Modified-Since\" header. Consequently, I feel it is unlikely to break existing code, if file_get_contents() were to return FALSE rather than an empty string.  This implies to the caller correctly that NO data was returned, rather than falsely implying that the file has NEW data and the data is an empty file. \r\nWhen the caller receives FALSE to an \"If-Modified-Since\", then their logic has the choice how to handle the FALSE condition (e.g., by short circuiting non-applicable code blocks if there is no new data.)"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 347,
    "fields": {
      "bug": 67351,
      "user": "cmb@php.net",
      "content": "> Sorry - I thought I had already posted this:\r\n\r\nYou had.  Sorry.\r\n\r\nAnyhow, the behavior of copy() and file_get_contents() are clearly\r\nin error here, and not copying/fetching but returning false seems\r\nappropriate."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 348,
    "fields": {
      "bug": 67383,
      "user": "langemeijer@php.net",
      "content": "This is a duplicate of"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 349,
    "fields": {
      "bug": 67383,
      "user": "langemeijer@php.net",
      "content": "Obviously, this bug is not a duplicate of itself. Previous comment was a clerical error."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 350,
    "fields": {
      "bug": 67383,
      "user": "brak at gameservers dot com",
      "content": "This issue can cause you to be unable to restart PHP-FPM.  Specifically, this leaks the webserver -> php-fpm socket to any process you execute.  This prevents PHP-FPM from cleanly restarting until the process exits, because the socket will already be in use.\r\n\r\nQuick example:\r\n<?php\r\n        $p = popen('/bin/bash -c \"sleep 60\"','w');\r\n        pclose($p);\r\n?>\r\n\r\nNow find the child process (ps aux | grep sleep) and lsof -p XXX -n:\r\n\r\nsleep   13443 nobody    0r  FIFO      0,8      0t0 10237775 pipe\r\nsleep   13443 nobody    1u   CHR      1,3      0t0     3920 /dev/null\r\nsleep   13443 nobody    2u   CHR      1,3      0t0     3920 /dev/null\r\nsleep   13443 nobody    4u  IPv4 10236693      0t0      TCP 127.0.0.1:cslistener->127.0.0.1:53151 (ESTABLISHED)\r\nsleep   13443 nobody    9u   REG      0,9        0     3918 [eventpoll]\r\n\r\n\r\nFD 4 there is the TCP connection from the PHP worker process to the web server."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 351,
    "fields": {
      "bug": 67383,
      "user": "daverandom@php.net",
      "content": "It is, in my opinion, not desirable to do this blindly for all fds.\r\n\r\nIt should be possible to specify this on a per-fd basis. For streams this can be done with a context option (or multiple context options for sockets vs files), but for e.g. mysqlnd it's trickier - most likely these should default to not being inheritable, but this will need to be taken care of by the extension.\r\n\r\nA stream context option would cover 99% of cases where it's relevant, though. I would be fine with having the context option default to setting the flag, and needing to explicitly make an fd heritable, but this would be a BC break."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 352,
    "fields": {
      "bug": 67414,
      "user": "roctom at gmail dot com",
      "content": "Hi,\r\n\r\nI'm trying to track down a memory leak in some of my code and I'm seeing similar munmap with a size of 266240, would anyone know where that allocation request is made?"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 353,
    "fields": {
      "bug": 67414,
      "user": "bjori@php.net",
      "content": "This isn't PhD fault.\r\nI do believe it may be sqlite3 issue or the engine.\r\n\r\nIIRC it happens when committing \"big transaction\" into sqlite3"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 354,
    "fields": {
      "bug": 67736,
      "user": "tyrael@php.net",
      "content": "I think we should fix this.\r\nrfc6265 (latest rfc defining http cookies) states that \r\n\"Servers SHOULD NOT include more than one Set-Cookie header field in the same response with the same cookie-name.\""
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 355,
    "fields": {
      "bug": 67736,
      "user": "Danack at basereality dot com",
      "content": "(X-posting from PR)\r\n\r\nThe PHP code does not have a bug. The RFC does not forbid sending multiple cookies with the same name:\r\n\r\n\"Servers SHOULD NOT include more than one Set-Cookie header field in the same response with the same cookie-name. (See Section 5.2 for how user agents handle this case.)\"\r\n\r\nAlthough it is definitely not recommended, the RFC does not say MUST NOT.\r\n\r\nEven if it was forbidden by the RFC, it is not PHP's job to enforce conformance to RFCs. That is up to the programmer using PHP to not send improper data.\r\n\r\nThe idea of having setcookie magically modifying the cookie header that is sent is not good. It would be adding more magic behaviour to PHP to cover up the fact that the programmer who is calling setcookie() has a bug in their code.\r\n\r\nAdding a warning is enough. It tells people that they are doing something that is probably unwise, but is technically allowed. Doing anything more is not only the wrong thing to do anyway, but introduces a backwards compatibility break for no good reason.\r\n\r\nIf someone is unaware they are calling setcookie() twice with the same name, the error will alert them and allow them to fix their code.\r\n\r\nIf someone is deliberately calling setcookie() twice with the same name (e.g. for a legacy application that knows how to handle multiple cookies with the same name) then they will need to continue using the current behaviour.\r\n\r\nChanging the behaviour just because it would be a bit 'better' is not a good idea. There needs to be a clear reason for changing the behaviour, and I don't think there is one here."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 356,
    "fields": {
      "bug": 67736,
      "user": "craig at craigfrancis dot co dot uk",
      "content": "There might be a case with sessions... e.g. if you called session_start() more than once.\r\n\r\nWhile this is not normal, in a high security application you might do a session_start() and a session_regenerate_id(true) when the user logs in... then because of"
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 357,
    "fields": {
      "bug": 68230,
      "user": "gm dot outside+php at gmail dot com",
      "content": "I've just added a patch that partially fixes the test suite.  My patch extracts the name of the configuration file and/or additional configuration files provided to testsuite's PHP binary and executes the spawned PHP binary with the same set of files.  It also extracts the extension_dir and supplies it to the spawned process.\r\n\r\nNOTE: This patch is just to fix our build environment so we can build PHP.  This patch does NOT address the real issue of picking up the system-wide configuration files and it misses any custom configuration supplied to the test suite.\r\n\r\nTo properly solve the issue a new mechanism needs to be invented to ensure that the tests which require spawned children get the proper environment inherited from the primary test suite process."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 358,
    "fields": {
      "bug": 68230,
      "user": "rainer dot jung at kippdata dot de",
      "content": "This worked for me (and was needed) for PHP 7. I also had to add \r\n\r\n$custom_ini .= \" -d 'extension=openssl.so'\";\r\n\r\nto load the openssl extension (which I had build as a dynamically loadable one)."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 359,
    "fields": {
      "bug": 68466,
      "user": "fmargaine@php.net",
      "content": "Hi,\r\n\r\nThis is the equivalent you're looking for:\r\n\r\n<?php\r\n$o = new SplFileObject(__FILE__);\r\n\r\nwhile (!$o->eof()) {\r\n  var_dump($o->fgets());\r\n}\r\n\r\n?>\r\n\r\nHowever, it *is* weird that the iterator doesn't stop at the end of file."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 360,
    "fields": {
      "bug": 68466,
      "user": "fmargaine@php.net",
      "content": "I can't actually reproduce having bool(false) at the end. On a clean build (5.5/5.6), SplFileObject iterates correctly."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 361,
    "fields": {
      "bug": 68466,
      "user": "tim_siebels_aurich at yahoo dot de",
      "content": "It sure does. But it is different from the fopen variation.\r\n\r\nTake a second look at expected/actual. \r\n\r\nI expect to have false at the end, because if you use fopen() you get false at the end. Either of those should be changed."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 362,
    "fields": {
      "bug": 68466,
      "user": "requinix@php.net",
      "content": "You need a trailing newline at the end of the file.\r\n\r\nThe regular file functions work on streams, not literally files. You have to try to read past the end of the stream before feof() will know to return true. However when fread() reads the last time there is nothing left so it returns false.\r\nSplFileObject works on streams too but entire lines at a time. It also considers an empty line to still be a line, which is why it returns \"\" instead of false - which fits with how most text editors treat trailing newlines too.\r\n\r\nI don't consider this to be a bug since (1) as fmargaine said the two code chunks are not actually equivalent, and (2) the two methods read files in a slightly different way."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 363,
    "fields": {
      "bug": 68466,
      "user": "tim_siebels_aurich at yahoo dot de",
      "content": "To (1):\r\n  fmargaine also provided an equivalent snippet, that doesn't match the output.\r\n\r\nTo (2):\r\n  Of course they do, that's why I opened this bug :P\r\n  I don't really understand why SplFileObject works differently. \r\n  \r\n  > SplFileObject works on streams too but entire lines at a time.\r\n\r\n  SplFileObject has methods that map the name from fopen and friends. \r\n  As far as I know SplFileObject doesn't use entire lines. \r\n  I can SplFileObject::fread from it as well.\r\n  fgets() uses entire lines as well, but the output still differs.  \r\n\r\nI see why it is good to have it when iterating over the SplFileObject. Otherwise every last line would be false.\r\nHowever, I don't see why they should be different. I expect them to be the same. They provide the same functionality and even the same names."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 364,
    "fields": {
      "bug": 68466,
      "user": "cmb@php.net",
      "content": "> I see why it is good to have it when iterating over the\r\n> SplFileObject. Otherwise every last line would be false.\r\n> However, I don't see why they should be different. I expect them\r\n> to be the same. They provide the same functionality and even the\r\n> same names.\r\n\r\nSo you really think the more useful behavior should be changed for\r\nthe sake of consistency with rather low-level (C'ish) behavior?\r\nI'd rather change the names of the methods instead. Neither is\r\nobviously something that can be easily done with regard to\r\nbackward compatibility, though."
    }
  },
  {
    "model": "bug_api.comment",
    "pk": 365,
    "fields": {
      "bug": 68606,
      "user": "whsv26 at gmail dot com",
      "content": "It's very frustrating. I can't implement things like trampolining and big linked lists cause of this bug."
    }
  }
  ]